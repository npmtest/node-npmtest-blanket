{"/home/travis/build/npmtest/node-npmtest-blanket/test.js":"/* istanbul instrument in package npmtest_blanket */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blanket/lib.npmtest_blanket.js":"/* istanbul instrument in package npmtest_blanket */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_blanket = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_blanket = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-blanket/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-blanket && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_blanket */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_blanket\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_blanket.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_blanket.rollup.js'] =\n            local.assetsDict['/assets.npmtest_blanket.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_blanket.__dirname +\n                    '/lib.npmtest_blanket.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blanket/blanket/src/index.js":"var extend = require(\"xtend\"),\n    path = require('path'),\n    join = path.join;\n\n\nvar blanketNode = function (userOptions,cli){\n\n    var fs = require(\"fs\"),\n        path = require(\"path\"),\n        configPath = process.cwd() + '/package.json',\n        existsSync = fs.existsSync || path.existsSync,\n        file = existsSync(configPath) ? JSON.parse((fs.readFileSync(configPath, 'utf8')||{})) : null,\n        packageConfigs;\n\n    if (file){\n        var scripts = file.scripts,\n            config = file.config;\n\n        if (scripts && scripts.blanket){\n            console.warn(\"BLANKET-\" + path + \": `scripts[\\\"blanket\\\"]` is deprecated. Please migrate to `config[\\\"blanket\\\"]`.\\n\");\n            packageConfigs = scripts.blanket;\n        } else if (config && config.blanket){\n            packageConfigs = config.blanket;\n        }\n    }\n\n    var blanketConfigs = packageConfigs ? extend(packageConfigs,userOptions) : userOptions,\n        blanket = require(\"./blanket\").blanket,\n        oldLoader = require.extensions['.js'],\n        newLoader;\n\n    function escapeRegExp(str) {\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    }\n    if (blanketConfigs){\n        var newOptions={\n            'filter': 'src' // Default filter to src\n        };\n        Object.keys(blanketConfigs).forEach(function (option) {\n            var optionValue = blanketConfigs[option];\n            if(option === \"data-cover-only\" || option === \"pattern\"){\n                newOptions.filter = optionValue;\n            }\n            if(option === \"data-cover-never\"){\n                newOptions.antifilter = optionValue;\n            }\n            if (option === \"data-cover-loader\" || option === \"loader\"){\n                newOptions.loader = optionValue;\n            }\n            if (option === \"data-cover-timeout\"){\n                newOptions.timeout = optionValue;\n            }\n            if (option === \"onlyCwd\" && !!optionValue){\n                newOptions.cwdRegex = new RegExp(\"^\" + escapeRegExp(process.cwd()), \"i\");\n            }\n            if (option === \"data-cover-customVariable\"){\n                newOptions.customVariable = optionValue;\n            }\n            if (option === \"data-cover-ecmaVersion\"){\n                newOptions.ecmaVersion = parseInt(optionValue,10);\n            }\n            if (option === \"data-cover-flags\"){\n                newOptions.order = !optionValue.unordered;\n                newOptions.ignoreScriptError = !!optionValue.ignoreError;\n                newOptions.autoStart = !!optionValue.autoStart;\n                newOptions.branchTracking = !!optionValue.branchTracking;\n                newOptions.debug = !!optionValue.debug;\n                newOptions.engineOnly = !!optionValue.engineOnly;\n            }\n            if (option === \"data-cover-reporter-options\"){\n                newOptions.reporter_options = optionValue;\n            }\n        });\n        blanket.options(newOptions);\n    } else {\n        // If no config is specified, default filter to src.\n        blanket.options('filter', 'src');\n    }\n\n    //helper functions\n    blanket.normalizeBackslashes = function (str) {\n        return str.replace(/\\\\/g, '/');\n    };\n\n    blanket.restoreNormalLoader = function () {\n      if (!blanket.options(\"engineOnly\")){\n        newLoader = require.extensions['.js'];\n        require.extensions['.js'] = oldLoader;\n      }\n    };\n\n    blanket.restoreBlanketLoader = function () {\n      if (!blanket.options(\"engineOnly\")){\n        require.extensions['.js'] = newLoader;\n      }\n    };\n\n    //you can pass in a string, a regex, or an array of files\n    blanket.matchPattern = function (filename,pattern){\n        var cwdRegex = blanket.options(\"cwdRegex\");\n        if (cwdRegex && !cwdRegex.test(filename)){\n            return false;\n        }\n        if (typeof pattern === 'string'){\n            if (pattern.indexOf(\"[\") === 0){\n                    //treat as array\n                var pattenArr = pattern.slice(1,pattern.length-1).split(\",\");\n                return pattenArr.some(function(elem){\n                    return blanket.matchPattern(filename,blanket.normalizeBackslashes(elem.slice(1,-1)));\n                });\n            }else if ( pattern.indexOf(\"//\") === 0){\n                var ex = pattern.slice(2,pattern.lastIndexOf('/'));\n                var mods = pattern.slice(pattern.lastIndexOf('/')+1);\n                var regex = new RegExp(ex,mods);\n                return regex.test(filename);\n            }else{\n                return filename.indexOf(blanket.normalizeBackslashes(pattern)) > -1;\n            }\n        }else if ( pattern instanceof Array ){\n            return pattern.some(function(elem){\n                return filename.indexOf(blanket.normalizeBackslashes(elem)) > -1;\n            });\n        }else if (pattern instanceof RegExp){\n            return pattern.test(filename);\n        }else if (typeof pattern === 'function'){\n            return pattern(filename);\n        }else{\n            throw new Error(\"Bad file instrument indicator.  Must be a string, regex, function, or array.\");\n        }\n    };\n    if (!blanket.options(\"engineOnly\")){\n        //instrument js files\n        require.extensions['.js'] = function(localModule, filename) {\n            var pattern = blanket.options(\"filter\"),\n                reporter_options = blanket.options(\"reporter_options\"),\n                originalFilename = filename,\n\t\t\tinputFilename = filename;\n            filename = blanket.normalizeBackslashes(filename);\n\n            //we check the never matches first\n            var antipattern = _blanket.options(\"antifilter\");\n            if (typeof antipattern !== \"undefined\" &&\n                    blanket.matchPattern(filename.replace(/\\.js$/,\"\"),antipattern)\n                ){\n                oldLoader(localModule,filename);\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-File will never be instrumented:\"+filename);}\n            }else if (blanket.matchPattern(filename,pattern)){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Attempting instrument of:\"+filename);}\n                var content = fs.readFileSync(filename, 'utf8');\n                if (reporter_options && reporter_options.shortnames){\n                    inputFilename = filename.replace(path.dirname(filename),\"\");\n                } else if (reporter_options && reporter_options.relativepath) {\n                    inputFilename = filename.replace(process.cwd(),\"\");\n                }\n                if (reporter_options && reporter_options.basepath){\n                    inputFilename = filename.replace(reporter_options.basepath + '/',\"\");\n                }\n\n                blanket.instrument({\n                    inputFile: content,\n                    inputFileName: blanket.normalizeBackslashes(inputFilename)\n                },function(instrumented){\n                    var baseDirPath = blanket.normalizeBackslashes(path.dirname(filename))+'/.';\n                    try{\n                        instrumented = instrumented.replace(/require\\s*\\(\\s*(\"|')\\./g,'require($1'+baseDirPath);\n                        localModule._compile(instrumented, originalFilename);\n                    }\n                    catch(err){\n                        if (_blanket.options(\"ignoreScriptError\")){\n                            //we can continue like normal if\n                            //we're ignoring script errors,\n                            //but otherwise we don't want\n                            //to completeLoad or the error might be\n                            //missed.\n                            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-There was an error loading the file:\"+filename);}\n                            oldLoader(localModule,filename);\n                        }else{\n                            var e = new Error(\"BLANKET-Error parsing instrumented code: \"+err);\n                            e.error = err;\n                            throw e;\n                        }\n                    }\n                });\n            }else{\n                oldLoader(localModule, originalFilename);\n            }\n        };\n    }\n    //if a loader is specified, use it\n    var loaderOption = blanket.options(\"loader\");\n    if (loaderOption){\n        if (Array.isArray(loaderOption)) {\n            loaderOption.forEach(function(loader) {\n                require(loader)(blanket);\n            });\n        } else {\n            require(loaderOption)(blanket);\n        }\n    }\n    newLoader = require.extensions['.js'];\n    return blanket;\n};\n\nif ((process.env && process.env.BLANKET_COV===1) ||\n    (process.ENV && process.ENV.BLANKET_COV)){\n    module.exports = blanketNode({engineOnly:true},false);\n}else{\n    var args = process.argv;\n    var blanketRequired = false;\n\n    for (var i = 0; i < args.length; i++) {\n        if (['-r', '--require'].indexOf(args[i]) >= 0 &&\n            args[i + 1] === 'blanket') {\n            blanketRequired = true;\n        }\n    }\n\n    if (['node', 'iojs', 'nodejs', 'jx'].indexOf(path.basename(args[0])) > -1 &&\n        args[1].indexOf(join('node_modules','mocha','bin')) > -1 &&\n        blanketRequired){\n\n        //using mocha cli\n        module.exports = blanketNode(null,true);\n    }else{\n        //not mocha cli\n        module.exports = function(options){\n            //we don't want to expose the cli option.\n            return blanketNode(options,false);\n        };\n    }\n}\n\n\n\n\n\n"}