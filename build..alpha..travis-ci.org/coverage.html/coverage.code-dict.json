{"/home/travis/build/npmtest/node-npmtest-blanket/test.js":"/* istanbul instrument in package npmtest_blanket */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blanket/lib.npmtest_blanket.js":"/* istanbul instrument in package npmtest_blanket */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_blanket = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_blanket = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-blanket/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-blanket && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_blanket */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_blanket\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_blanket.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_blanket.rollup.js'] =\n            local.assetsDict['/assets.npmtest_blanket.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_blanket.__dirname + '/lib.npmtest_blanket.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/index.js":"var extend = require(\"xtend\"),\n    path = require('path'),\n    join = path.join;\n\n\nvar blanketNode = function (userOptions,cli){\n\n    var fs = require(\"fs\"),\n        path = require(\"path\"),\n        configPath = process.cwd() + '/package.json',\n        existsSync = fs.existsSync || path.existsSync,\n        file = existsSync(configPath) ? JSON.parse((fs.readFileSync(configPath, 'utf8')||{})) : null,\n        packageConfigs;\n\n    if (file){\n        var scripts = file.scripts,\n            config = file.config;\n\n        if (scripts && scripts.blanket){\n            console.warn(\"BLANKET-\" + path + \": `scripts[\\\"blanket\\\"]` is deprecated. Please migrate to `config[\\\"blanket\\\"]`.\\n\");\n            packageConfigs = scripts.blanket;\n        } else if (config && config.blanket){\n            packageConfigs = config.blanket;\n        }\n    }\n\n    var blanketConfigs = packageConfigs ? extend(packageConfigs,userOptions) : userOptions,\n        blanket = require(\"./blanket\").blanket,\n        oldLoader = require.extensions['.js'],\n        newLoader;\n\n    function escapeRegExp(str) {\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    }\n    if (blanketConfigs){\n        var newOptions={\n            'filter': 'src' // Default filter to src\n        };\n        Object.keys(blanketConfigs).forEach(function (option) {\n            var optionValue = blanketConfigs[option];\n            if(option === \"data-cover-only\" || option === \"pattern\"){\n                newOptions.filter = optionValue;\n            }\n            if(option === \"data-cover-never\"){\n                newOptions.antifilter = optionValue;\n            }\n            if (option === \"data-cover-loader\" || option === \"loader\"){\n                newOptions.loader = optionValue;\n            }\n            if (option === \"data-cover-timeout\"){\n                newOptions.timeout = optionValue;\n            }\n            if (option === \"onlyCwd\" && !!optionValue){\n                newOptions.cwdRegex = new RegExp(\"^\" + escapeRegExp(process.cwd()), \"i\");\n            }\n            if (option === \"data-cover-customVariable\"){\n                newOptions.customVariable = optionValue;\n            }\n            if (option === \"data-cover-ecmaVersion\"){\n                newOptions.ecmaVersion = parseInt(optionValue,10);\n            }\n            if (option === \"data-cover-flags\"){\n                newOptions.order = !optionValue.unordered;\n                newOptions.ignoreScriptError = !!optionValue.ignoreError;\n                newOptions.autoStart = !!optionValue.autoStart;\n                newOptions.branchTracking = !!optionValue.branchTracking;\n                newOptions.debug = !!optionValue.debug;\n                newOptions.engineOnly = !!optionValue.engineOnly;\n            }\n            if (option === \"data-cover-reporter-options\"){\n                newOptions.reporter_options = optionValue;\n            }\n        });\n        blanket.options(newOptions);\n    } else {\n        // If no config is specified, default filter to src.\n        blanket.options('filter', 'src');\n    }\n\n    //helper functions\n    blanket.normalizeBackslashes = function (str) {\n        return str.replace(/\\\\/g, '/');\n    };\n\n    blanket.restoreNormalLoader = function () {\n      if (!blanket.options(\"engineOnly\")){\n        newLoader = require.extensions['.js'];\n        require.extensions['.js'] = oldLoader;\n      }\n    };\n\n    blanket.restoreBlanketLoader = function () {\n      if (!blanket.options(\"engineOnly\")){\n        require.extensions['.js'] = newLoader;\n      }\n    };\n\n    //you can pass in a string, a regex, or an array of files\n    blanket.matchPattern = function (filename,pattern){\n        var cwdRegex = blanket.options(\"cwdRegex\");\n        if (cwdRegex && !cwdRegex.test(filename)){\n            return false;\n        }\n        if (typeof pattern === 'string'){\n            if (pattern.indexOf(\"[\") === 0){\n                    //treat as array\n                var pattenArr = pattern.slice(1,pattern.length-1).split(\",\");\n                return pattenArr.some(function(elem){\n                    return blanket.matchPattern(filename,blanket.normalizeBackslashes(elem.slice(1,-1)));\n                });\n            }else if ( pattern.indexOf(\"//\") === 0){\n                var ex = pattern.slice(2,pattern.lastIndexOf('/'));\n                var mods = pattern.slice(pattern.lastIndexOf('/')+1);\n                var regex = new RegExp(ex,mods);\n                return regex.test(filename);\n            }else{\n                return filename.indexOf(blanket.normalizeBackslashes(pattern)) > -1;\n            }\n        }else if ( pattern instanceof Array ){\n            return pattern.some(function(elem){\n                return filename.indexOf(blanket.normalizeBackslashes(elem)) > -1;\n            });\n        }else if (pattern instanceof RegExp){\n            return pattern.test(filename);\n        }else if (typeof pattern === 'function'){\n            return pattern(filename);\n        }else{\n            throw new Error(\"Bad file instrument indicator.  Must be a string, regex, function, or array.\");\n        }\n    };\n    if (!blanket.options(\"engineOnly\")){\n        //instrument js files\n        require.extensions['.js'] = function(localModule, filename) {\n            var pattern = blanket.options(\"filter\"),\n                reporter_options = blanket.options(\"reporter_options\"),\n                originalFilename = filename,\n\t\t\tinputFilename = filename;\n            filename = blanket.normalizeBackslashes(filename);\n\n            //we check the never matches first\n            var antipattern = _blanket.options(\"antifilter\");\n            if (typeof antipattern !== \"undefined\" &&\n                    blanket.matchPattern(filename.replace(/\\.js$/,\"\"),antipattern)\n                ){\n                oldLoader(localModule,filename);\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-File will never be instrumented:\"+filename);}\n            }else if (blanket.matchPattern(filename,pattern)){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Attempting instrument of:\"+filename);}\n                var content = fs.readFileSync(filename, 'utf8');\n                if (reporter_options && reporter_options.shortnames){\n                    inputFilename = filename.replace(path.dirname(filename),\"\");\n                } else if (reporter_options && reporter_options.relativepath) {\n                    inputFilename = filename.replace(process.cwd(),\"\");\n                }\n                if (reporter_options && reporter_options.basepath){\n                    inputFilename = filename.replace(reporter_options.basepath + '/',\"\");\n                }\n\n                blanket.instrument({\n                    inputFile: content,\n                    inputFileName: blanket.normalizeBackslashes(inputFilename)\n                },function(instrumented){\n                    var baseDirPath = blanket.normalizeBackslashes(path.dirname(filename))+'/.';\n                    try{\n                        instrumented = instrumented.replace(/require\\s*\\(\\s*(\"|')\\./g,'require($1'+baseDirPath);\n                        localModule._compile(instrumented, originalFilename);\n                    }\n                    catch(err){\n                        if (_blanket.options(\"ignoreScriptError\")){\n                            //we can continue like normal if\n                            //we're ignoring script errors,\n                            //but otherwise we don't want\n                            //to completeLoad or the error might be\n                            //missed.\n                            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-There was an error loading the file:\"+filename);}\n                            oldLoader(localModule,filename);\n                        }else{\n                            var e = new Error(\"BLANKET-Error parsing instrumented code: \"+err);\n                            e.error = err;\n                            throw e;\n                        }\n                    }\n                });\n            }else{\n                oldLoader(localModule, originalFilename);\n            }\n        };\n    }\n    //if a loader is specified, use it\n    var loaderOption = blanket.options(\"loader\");\n    if (loaderOption){\n        if (Array.isArray(loaderOption)) {\n            loaderOption.forEach(function(loader) {\n                require(loader)(blanket);\n            });\n        } else {\n            require(loaderOption)(blanket);\n        }\n    }\n    newLoader = require.extensions['.js'];\n    return blanket;\n};\n\nif ((process.env && process.env.BLANKET_COV===1) ||\n    (process.ENV && process.ENV.BLANKET_COV)){\n    module.exports = blanketNode({engineOnly:true},false);\n}else{\n    var args = process.argv;\n    var blanketRequired = false;\n\n    for (var i = 0; i < args.length; i++) {\n        if (['-r', '--require'].indexOf(args[i]) >= 0 &&\n            args[i + 1] === 'blanket') {\n            blanketRequired = true;\n        }\n    }\n\n    if (['node', 'iojs', 'nodejs', 'jx'].indexOf(path.basename(args[0])) > -1 &&\n        args[1].indexOf(join('node_modules','mocha','bin')) > -1 &&\n        blanketRequired){\n\n        //using mocha cli\n        module.exports = blanketNode(null,true);\n    }else{\n        //not mocha cli\n        module.exports = function(options){\n            //we don't want to expose the cli option.\n            return blanketNode(options,false);\n        };\n    }\n}\n\n\n\n\n\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/blanket_browser.js":"(function(_blanket){\n    var oldOptions = _blanket.options;\n_blanket.extend({\n    outstandingRequireFiles:[],\n    options: function(key,value){\n        var newVal={};\n\n        if (typeof key !== \"string\"){\n            //key is key/value map\n            oldOptions(key);\n            newVal = key;\n        }else if (typeof value === 'undefined'){\n            //accessor\n            return oldOptions(key);\n        }else{\n            //setter\n            oldOptions(key,value);\n            newVal[key] = value;\n        }\n\n        if (newVal.adapter){\n            _blanket._loadFile(newVal.adapter);\n        }\n        if (newVal.loader){\n            _blanket._loadFile(newVal.loader);\n        }\n    },\n    requiringFile: function(filename,done){\n        if (typeof filename === \"undefined\"){\n            _blanket.outstandingRequireFiles=[];\n        }else if (typeof done === \"undefined\"){\n            _blanket.outstandingRequireFiles.push(filename);\n        }else{\n            _blanket.outstandingRequireFiles.splice(_blanket.outstandingRequireFiles.indexOf(filename),1);\n        }\n    },\n    requireFilesLoaded: function(){\n        return _blanket.outstandingRequireFiles.length === 0;\n    },\n    showManualLoader: function(){\n        if (document.getElementById(\"blanketLoaderDialog\")){\n            return;\n        }\n        //copied from http://blog.avtex.com/2012/01/26/cross-browser-css-only-modal-box/\n        var loader = \"<div class='blanketDialogOverlay'>\";\n            loader += \"&nbsp;</div>\";\n            loader += \"<div class='blanketDialogVerticalOffset'>\";\n            loader += \"<div class='blanketDialogBox'>\";\n            loader += \"<b>Error:</b> Blanket.js encountered a cross origin request error while instrumenting the source files.  \";\n            loader += \"<br><br>This is likely caused by the source files being referenced locally (using the file:// protocol). \";\n            loader += \"<br><br>Some solutions include <a href='http://askubuntu.com/questions/160245/making-google-chrome-option-allow-file-access-from-files-permanent' target='_blank'>starting Chrome with special flags</a>, <a target='_blank' href='https://github.com/remy/servedir'>running a server locally</a>, or using a browser without these CORS restrictions (Safari).\";\n            loader += \"<br>\";\n            if (typeof FileReader !== \"undefined\"){\n                loader += \"<br>Or, try the experimental loader.  When prompted, simply click on the directory containing all the source files you want covered.\";\n                loader += \"<a href='javascript:document.getElementById(\\\"fileInput\\\").click();'>Start Loader</a>\";\n                loader += \"<input type='file' type='application/x-javascript' accept='application/x-javascript' webkitdirectory id='fileInput' multiple onchange='window.blanket.manualFileLoader(this.files)' style='visibility:hidden;position:absolute;top:-50;left:-50'/>\";\n            }\n            loader += \"<br><span style='float:right;cursor:pointer;'  onclick=document.getElementById('blanketLoaderDialog').style.display='none';>Close</span>\";\n            loader += \"<div style='clear:both'></div>\";\n            loader += \"</div></div>\";\n\n        var css = \".blanketDialogWrapper {\";\n            css += \"display:block;\";\n            css += \"position:fixed;\";\n            css += \"z-index:40001; }\";\n\n            css += \".blanketDialogOverlay {\";\n            css += \"position:fixed;\";\n            css += \"width:100%;\";\n            css += \"height:100%;\";\n            css += \"background-color:black;\";\n            css += \"opacity:.5; \";\n            css += \"-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=50)'; \";\n            css += \"filter:alpha(opacity=50); \";\n            css += \"z-index:40001; }\";\n\n            css += \".blanketDialogVerticalOffset { \";\n            css += \"position:fixed;\";\n            css += \"top:30%;\";\n            css += \"width:100%;\";\n            css += \"z-index:40002; }\";\n\n            css += \".blanketDialogBox { \";\n            css += \"width:405px; \";\n            css += \"position:relative;\";\n            css += \"margin:0 auto;\";\n            css += \"background-color:white;\";\n            css += \"padding:10px;\";\n            css += \"border:1px solid black; }\";\n\n        var dom = document.createElement(\"style\");\n        dom.innerHTML = css;\n        document.head.appendChild(dom);\n\n        var div = document.createElement(\"div\");\n        div.id = \"blanketLoaderDialog\";\n        div.className = \"blanketDialogWrapper\";\n        div.innerHTML = loader;\n        document.body.insertBefore(div,document.body.firstChild);\n\n    },\n    manualFileLoader: function(files){\n        var toArray =Array.prototype.slice;\n        files = toArray.call(files).filter(function(item){\n            return item.type !== \"\";\n        });\n        var sessionLength = files.length-1;\n        var sessionIndx=0;\n        var sessionArray = {};\n        if (sessionStorage[\"blanketSessionLoader\"]){\n            sessionArray = JSON.parse(sessionStorage[\"blanketSessionLoader\"]);\n        }\n\n\n        var fileLoader = function(event){\n            var fileContent = event.currentTarget.result;\n            var file = files[sessionIndx];\n            var filename = file.webkitRelativePath && file.webkitRelativePath !== '' ? file.webkitRelativePath : file.name;\n            sessionArray[filename] = fileContent;\n            sessionIndx++;\n            if (sessionIndx === sessionLength){\n                sessionStorage.setItem(\"blanketSessionLoader\", JSON.stringify(sessionArray));\n                document.location.reload();\n            }else{\n                readFile(files[sessionIndx]);\n            }\n        };\n        function readFile(file){\n            var reader = new FileReader();\n            reader.onload = fileLoader;\n            reader.readAsText(file);\n        }\n        readFile(files[sessionIndx]);\n    },\n    _loadFile: function(path){\n        if (typeof path !== \"undefined\"){\n            var request = new XMLHttpRequest();\n            request.open('GET', path, false);\n            request.send();\n            _blanket._addScript(request.responseText);\n        }\n    },\n    _addScript: function(data){\n        var script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.text = data;\n        (document.body || document.getElementsByTagName('head')[0]).appendChild(script);\n    },\n    hasAdapter: function(callback){\n        return _blanket.options(\"adapter\") !== null;\n    },\n    report: function(coverage_data){\n        if (!document.getElementById(\"blanketLoaderDialog\")){\n            //all found, clear it\n            _blanket.blanketSession = null;\n        }\n        coverage_data.files = window._$blanket;\n        var require = blanket.options(\"commonJS\") ? blanket._commonjs.require : window.require;\n\n        // Check if we have any covered files that requires reporting\n        // otherwise just exit gracefully.\n        if (!coverage_data.files || !Object.keys(coverage_data.files).length) {\n            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Reporting No files were instrumented.\");}\n            return;\n        }\n\n        if (typeof coverage_data.files.branchFcn !== \"undefined\"){\n            delete coverage_data.files.branchFcn;\n        }\n        if (typeof _blanket.options(\"reporter\") === \"string\"){\n            _blanket._loadFile(_blanket.options(\"reporter\"));\n            _blanket.customReporter(coverage_data,_blanket.options(\"reporter_options\"));\n        }else if (typeof _blanket.options(\"reporter\") === \"function\"){\n            _blanket.options(\"reporter\")(coverage_data,_blanket.options(\"reporter_options\"));\n        }else if (typeof _blanket.defaultReporter === 'function'){\n            _blanket.defaultReporter(coverage_data,_blanket.options(\"reporter_options\"));\n        }else{\n            throw new Error(\"no reporter defined.\");\n        }\n    },\n    _bindStartTestRunner: function(bindEvent,startEvent){\n        if (bindEvent){\n            bindEvent(startEvent);\n        }else{\n            if (document.readyState === \"complete\") {\n                startEvent();\n            } else {\n                window.addEventListener(\"load\",startEvent,false);\n            }\n        }\n    },\n    _loadSourceFiles: function(callback){\n        var require = blanket.options(\"commonJS\") ? blanket._commonjs.require : window.require;\n        function copy(o){\n          var _copy = Object.create( Object.getPrototypeOf(o) );\n          var propNames = Object.getOwnPropertyNames(o);\n\n          propNames.forEach(function(name){\n            var desc = Object.getOwnPropertyDescriptor(o, name);\n            Object.defineProperty(_copy, name, desc);\n          });\n\n          return _copy;\n        }\n        if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Collecting page scripts\");}\n        var scripts = _blanket.utils.collectPageScripts();\n        //_blanket.options(\"filter\",scripts);\n        if (scripts.length === 0){\n            callback();\n        }else{\n\n            //check session state\n            if (sessionStorage[\"blanketSessionLoader\"]){\n                _blanket.blanketSession = JSON.parse(sessionStorage[\"blanketSessionLoader\"]);\n            }\n            \n            scripts.forEach(function(file,indx){\n                _blanket.utils.cache[file]={\n                    loaded:false\n                };\n            });\n            \n            var currScript=-1;\n            _blanket.utils.loadAll(function(test){\n                if (test){\n                  return typeof scripts[currScript+1] !== 'undefined';\n                }\n                currScript++;\n                if (currScript >= scripts.length){\n                  return null;\n                }\n                return scripts[currScript];\n            },callback);\n        }\n    },\n    beforeStartTestRunner: function(opts){\n        opts = opts || {};\n        opts.checkRequirejs = typeof opts.checkRequirejs === \"undefined\" ? true : opts.checkRequirejs;\n        opts.callback = opts.callback || function() {  };\n        opts.coverage = typeof opts.coverage === \"undefined\" ? true : opts.coverage;\n        if (opts.coverage) {\n            _blanket._bindStartTestRunner(opts.bindEvent,\n            function(){\n                _blanket._loadSourceFiles(function() {\n\n                    var allLoaded = function(){\n                        return opts.condition ? opts.condition() : _blanket.requireFilesLoaded();\n                    };\n                    var check = function() {\n                        if (allLoaded()) {\n                            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-All files loaded, init start test runner callback.\");}\n                            var cb = _blanket.options(\"testReadyCallback\");\n\n                            if (cb){\n                                if (typeof cb === \"function\"){\n                                    cb(opts.callback);\n                                }else if (typeof cb === \"string\"){\n                                    _blanket._addScript(cb);\n                                    opts.callback();\n                                }\n                            }else{\n                                opts.callback();\n                            }\n                        } else {\n                            setTimeout(check, 13);\n                        }\n                    };\n                    check();\n                });\n            });\n        }else{\n            opts.callback();\n        }\n    },\n    utils: {\n        qualifyURL: function (url) {\n            //http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n            var a = document.createElement('a');\n            a.href = url;\n            return a.href;\n        }\n    }\n});\n\n})(blanket);\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/blanket.js":"var inBrowser = typeof window !== 'undefined' && this === window;\nvar parseAndModify = (inBrowser ? window.falafel : require(\"falafel\"));\n\n(inBrowser ? window : exports).blanket = (function(){\n    var linesToAddTracking = [\n        \"ExpressionStatement\",\n        \"BreakStatement\"   ,\n        \"ContinueStatement\" ,\n        \"VariableDeclaration\",\n        \"ReturnStatement\"   ,\n        \"ThrowStatement\"   ,\n        \"TryStatement\"     ,\n        \"FunctionDeclaration\"    ,\n        \"IfStatement\"       ,\n        \"WhileStatement\"    ,\n        \"DoWhileStatement\"   ,\n        \"ForStatement\"   ,\n        \"ForInStatement\"  ,\n        \"SwitchStatement\"  ,\n        \"WithStatement\"\n    ],\n    linesToAddBrackets = [\n        \"IfStatement\"       ,\n        \"WhileStatement\"    ,\n        \"DoWhileStatement\"     ,\n        \"ForStatement\"   ,\n        \"ForInStatement\"  ,\n        \"WithStatement\"\n    ],\n    __blanket,\n    copynumber = Math.floor(Math.random()*1000),\n    coverageInfo = {},options = {\n        reporter: null,\n        adapter:null,\n        filter: null,\n        customVariable: null,\n        loader: null,\n        ignoreScriptError: false,\n        existingRequireJS:false,\n        autoStart: false,\n        timeout: 180,\n        ignoreCors: false,\n        branchTracking: false,\n        sourceURL: false,\n        debug:false,\n        engineOnly:false,\n        testReadyCallback:null,\n        commonJS:false,\n        instrumentCache:false,\n        modulePattern: null,\n        ecmaVersion: 5\n    };\n\n    if (inBrowser && typeof window.blanket !== 'undefined'){\n        __blanket = window.blanket.noConflict();\n    }\n\n    _blanket = {\n        noConflict: function(){\n            if (__blanket){\n                return __blanket;\n            }\n            return _blanket;\n        },\n        _getCopyNumber: function(){\n            //internal method\n            //for differentiating between instances\n            return copynumber;\n        },\n        extend: function(obj) {\n            //borrowed from underscore\n            _blanket._extend(_blanket,obj);\n        },\n        _extend: function(dest,source){\n          if (source) {\n            for (var prop in source) {\n              if ( dest[prop] instanceof Object && typeof dest[prop] !== \"function\"){\n                _blanket._extend(dest[prop],source[prop]);\n              }else{\n                  dest[prop] = source[prop];\n              }\n            }\n          }\n        },\n        getCovVar: function(){\n            var opt = _blanket.options(\"customVariable\");\n            if (opt){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Using custom tracking variable:\",opt);}\n                return inBrowser ? \"window.\"+opt : opt;\n            }\n            return inBrowser ?   \"window._$blanket\" : \"_$jscoverage\";\n        },\n        options: function(key,value){\n            if (typeof key !== \"string\"){\n                _blanket._extend(options,key);\n            }else if (typeof value === 'undefined'){\n                return options[key];\n            }else{\n                options[key]=value;\n            }\n        },\n        // instrument the file synchronously\n        // `next` is optional callback which will be called\n        // with instrumented code when present\n        instrumentSync: function(config, next){\n            //check instrumented hash table,\n            //return instrumented code if available.\n            var inFile = config.inputFile,\n                inFileName = config.inputFileName;\n            //check instrument cache\n           if (_blanket.options(\"instrumentCache\") && sessionStorage && sessionStorage.getItem(\"blanket_instrument_store-\"+inFileName)){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Reading instrumentation from cache: \",inFileName);}\n                if (next) {\n                    next(sessionStorage.getItem(\"blanket_instrument_store-\"+inFileName));\n                } else {\n                    return(sessionStorage.getItem(\"blanket_instrument_store-\"+inFileName));\n                }\n            }else{\n                var sourceArray = _blanket._prepareSource(inFile);\n                _blanket._trackingArraySetup=[];\n                //remove shebang\n                inFile = inFile.replace(/^\\#\\!.*/, \"\");\n                var instrumented =  parseAndModify(inFile,{locations:true,comment:true,ecmaVersion:_blanket.options(\"ecmaVersion\")}, _blanket._addTracking(inFileName));\n                instrumented = _blanket._trackingSetup(inFileName,sourceArray)+instrumented;\n                if (_blanket.options(\"sourceURL\")){\n                    instrumented += \"\\n//@ sourceURL=\"+inFileName.replace(\"http://\",\"\");\n                }\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Instrumented file: \",inFileName);}\n                if (_blanket.options(\"instrumentCache\") && sessionStorage){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Saving instrumentation to cache: \",inFileName);}\n                    sessionStorage.setItem(\"blanket_instrument_store-\"+inFileName,instrumented);\n                }\n                if (next) {\n                    next(instrumented);\n                } else {\n                    return(instrumented);\n                }\n            }\n        },\n        instrument: function(config, next){\n            _blanket.instrumentSync(config, next);\n        },\n        _trackingArraySetup: [],\n        _branchingArraySetup: [],\n        _useStrictMode: false,\n        _prepareSource: function(source){\n            return source.replace(/\\\\/g,\"\\\\\\\\\").replace(/'/g,\"\\\\'\").replace(/(\\r\\n|\\n|\\r)/gm,\"\\n\").split('\\n');\n        },\n        _trackingSetup: function(filename,sourceArray){\n            var branches = _blanket.options(\"branchTracking\");\n            var sourceString = sourceArray.join(\"',\\n'\");\n            var intro = \"\";\n            var covVar = _blanket.getCovVar();\n\n            if(_blanket._useStrictMode) {\n                intro += \"'use strict';\\n\";\n            }\n\n            intro += \"if (typeof \"+covVar+\" === 'undefined') \"+covVar+\" = {};\\n\";\n            if (branches){\n                intro += \"var _$branchFcn=function(f,l,c,r){ \";\n                intro += \"if (!!r) { \";\n                intro += covVar+\"[f].branchData[l][c][0] = \"+covVar+\"[f].branchData[l][c][0] || [];\";\n                intro += covVar+\"[f].branchData[l][c][0].push(r); }\";\n                intro += \"else { \";\n                intro += covVar+\"[f].branchData[l][c][1] = \"+covVar+\"[f].branchData[l][c][1] || [];\";\n                intro += covVar+\"[f].branchData[l][c][1].push(r); }\";\n                intro += \"return r;};\\n\";\n            }\n            intro += \"if (typeof \"+covVar+\"['\"+filename+\"'] === 'undefined'){\";\n\n            intro += covVar+\"['\"+filename+\"']=[];\\n\";\n            if (branches){\n                intro += covVar+\"['\"+filename+\"'].branchData=[];\\n\";\n            }\n            intro += covVar+\"['\"+filename+\"'].source=['\"+sourceString+\"'];\\n\";\n            //initialize array values\n            _blanket._trackingArraySetup.sort(function(a,b){\n                return parseInt(a,10) > parseInt(b,10);\n            }).forEach(function(item){\n                intro += covVar+\"['\"+filename+\"'][\"+item+\"]=0;\\n\";\n            });\n            if (branches){\n                _blanket._branchingArraySetup.sort(function(a,b){\n                    return a.line > b.line;\n                }).sort(function(a,b){\n                    return a.column > b.column;\n                }).forEach(function(item){\n                    if (item.file === filename){\n                        intro += \"if (typeof \"+ covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"] === 'undefined'){\\n\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"]=[];\\n\";\n                        intro += \"}\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"][\"+item.column+\"] = [];\\n\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"][\"+item.column+\"].consequent = \"+JSON.stringify(item.consequent)+\";\\n\";\n                        intro += covVar+\"['\"+filename+\"'].branchData[\"+item.line+\"][\"+item.column+\"].alternate = \"+JSON.stringify(item.alternate)+\";\\n\";\n                    }\n                });\n            }\n            intro += \"}\";\n\n            return intro;\n        },\n        _blockifyIf: function(node){\n            if (linesToAddBrackets.indexOf(node.type) > -1){\n                var bracketsExistObject = node.consequent || node.body;\n                var bracketsExistAlt = node.alternate;\n                if( bracketsExistAlt && bracketsExistAlt.type !== \"BlockStatement\") {\n                    bracketsExistAlt.update(\"{\\n\"+bracketsExistAlt.source()+\"}\\n\");\n                }\n                if( bracketsExistObject && bracketsExistObject.type !== \"BlockStatement\") {\n                    bracketsExistObject.update(\"{\\n\"+bracketsExistObject.source()+\"}\\n\");\n                }\n            }\n        },\n        _trackBranch: function(node,filename){\n            //recursive on consequent and alternative\n            var line = node.loc.start.line;\n            var col = node.loc.start.column;\n\n            _blanket._branchingArraySetup.push({\n                line: line,\n                column: col,\n                file:filename,\n                consequent: node.consequent.loc,\n                alternate: node.alternate.loc\n            });\n\n            var updated = \"_$branchFcn\"+\n                          \"('\"+filename+\"',\"+line+\",\"+col+\",\"+node.test.source()+\n                          \")?\"+node.consequent.source()+\":\"+node.alternate.source();\n            node.update(updated);\n        },\n        _addTracking: function (filename) {\n            //falafel doesn't take a file name\n            //so we include the filename in a closure\n            //and return the function to falafel\n            var covVar = _blanket.getCovVar();\n\n            return function(node){\n                _blanket._blockifyIf(node);\n\n                if (linesToAddTracking.indexOf(node.type) > -1 && node.parent.type !== \"LabeledStatement\") {\n                    _blanket._checkDefs(node,filename);\n                    if (node.type === \"VariableDeclaration\" &&\n                        (node.parent.type === \"ForStatement\" || node.parent.type === \"ForInStatement\")){\n                        return;\n                    }\n                    if (node.loc && node.loc.start){\n                        node.update(covVar+\"['\"+filename+\"'][\"+node.loc.start.line+\"]++;\\n\"+node.source());\n                        _blanket._trackingArraySetup.push(node.loc.start.line);\n                    }else{\n                        //I don't think we can handle a node with no location\n                        throw new Error(\"The instrumenter encountered a node with no location: \"+Object.keys(node));\n                    }\n                }else if (_blanket.options(\"branchTracking\") && node.type === \"ConditionalExpression\"){\n                    _blanket._trackBranch(node,filename);\n                }else if (node.type === \"Literal\" && node.value === \"use strict\" && node.parent && node.parent.type === \"ExpressionStatement\" && node.parent.parent && node.parent.parent.type === \"Program\"){\n                    _blanket._useStrictMode = true;\n                }\n            };\n        },\n        _checkDefs: function(node,filename){\n            // Make sure developers don't redefine window. if they do, inform them it is wrong.\n            if (inBrowser){\n                if (node.type === \"VariableDeclaration\" && node.declarations) {\n                    node.declarations.forEach(function(declaration) {\n                        if (declaration.id.name === \"window\") {\n                            throw new Error(\"Instrumentation error, you cannot redefine the 'window' variable in  \" + filename + \":\" + node.loc.start.line);\n                        }\n                    });\n                }\n                if (node.type === \"FunctionDeclaration\" && node.params) {\n                    node.params.forEach(function(param) {\n                        if (param.name === \"window\") {\n                            throw new Error(\"Instrumentation error, you cannot redefine the 'window' variable in  \" + filename + \":\" + node.loc.start.line);\n                        }\n                    });\n                }\n                //Make sure developers don't redefine the coverage variable\n                if (node.type === \"ExpressionStatement\" &&\n                    node.expression && node.expression.left &&\n                    node.expression.left.object && node.expression.left.property &&\n                    node.expression.left.object.name +\n                        \".\" + node.expression.left.property.name === _blanket.getCovVar()) {\n                    throw new Error(\"Instrumentation error, you cannot redefine the coverage variable in  \" + filename + \":\" + node.loc.start.line);\n                }\n            }else{\n                //Make sure developers don't redefine the coverage variable in node\n                if (node.type === \"ExpressionStatement\" &&\n                    node.expression && node.expression.left &&\n                    !node.expression.left.object && !node.expression.left.property &&\n                    node.expression.left.name === _blanket.getCovVar()) {\n                    throw new Error(\"Instrumentation error, you cannot redefine the coverage variable in  \" + filename + \":\" + node.loc.start.line);\n                }\n            }\n        },\n        setupCoverage: function(){\n            coverageInfo.instrumentation = \"blanket\";\n            coverageInfo.stats = {\n                \"suites\": 0,\n                \"tests\": 0,\n                \"passes\": 0,\n                \"pending\": 0,\n                \"failures\": 0,\n                \"start\": new Date()\n            };\n        },\n        _checkIfSetup: function(){\n            if (!coverageInfo.stats){\n                throw new Error(\"You must call blanket.setupCoverage() first.\");\n            }\n        },\n        onTestStart: function(){\n            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Test event started\");}\n            this._checkIfSetup();\n            coverageInfo.stats.tests++;\n            coverageInfo.stats.pending++;\n        },\n        onTestDone: function(total,passed){\n            this._checkIfSetup();\n            if(passed === total){\n                coverageInfo.stats.passes++;\n            }else{\n                coverageInfo.stats.failures++;\n            }\n            coverageInfo.stats.pending--;\n        },\n        onModuleStart: function(){\n            this._checkIfSetup();\n            coverageInfo.stats.suites++;\n        },\n        onTestsDone: function(){\n            if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Test event done\");}\n            this._checkIfSetup();\n            coverageInfo.stats.end = new Date();\n\n            if (inBrowser){\n                this.report(coverageInfo);\n            }else{\n                if (!_blanket.options(\"branchTracking\")){\n                    delete (inBrowser ? window : global)[_blanket.getCovVar()].branchFcn;\n                }\n                this.options(\"reporter\").call(this,coverageInfo);\n            }\n        }\n    };\n    return _blanket;\n})();\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/blanketRequire.js":"(function(_blanket){\n_blanket.extend({\n    utils: {\n        normalizeBackslashes: function(str) {\n            return str.replace(/\\\\/g, '/');\n        },\n        matchPatternAttribute: function(filename,pattern){\n            if (typeof pattern === 'string'){\n                if (pattern.indexOf(\"[\") === 0){\n                    //treat as array\n                    var pattenArr = pattern.slice(1,pattern.length-1).split(\",\");\n                    return pattenArr.some(function(elem){\n                        return _blanket.utils.matchPatternAttribute(filename,_blanket.utils.normalizeBackslashes(elem.slice(1,-1)));\n                        //return filename.indexOf(_blanket.utils.normalizeBackslashes(elem.slice(1,-1))) > -1;\n                    });\n                }else if ( pattern.indexOf(\"//\") === 0){\n                    var ex = pattern.slice(2,pattern.lastIndexOf('/'));\n                    var mods = pattern.slice(pattern.lastIndexOf('/')+1);\n                    var regex = new RegExp(ex,mods);\n                    return regex.test(filename);\n                }else if (pattern.indexOf(\"#\") === 0){\n                    return window[pattern.slice(1)].call(window,filename);\n                }else{\n                    return filename.indexOf(_blanket.utils.normalizeBackslashes(pattern)) > -1;\n                }\n            }else if ( pattern instanceof Array ){\n                return pattern.some(function(elem){\n                    return _blanket.utils.matchPatternAttribute(filename,elem);\n                });\n            }else if (pattern instanceof RegExp){\n                return pattern.test(filename);\n            }else if (typeof pattern === \"function\"){\n                return pattern.call(window,filename);\n            }\n        },\n        blanketEval: function(data){\n            _blanket._addScript(data);\n        },\n        collectPageScripts: function(){\n            var toArray = Array.prototype.slice;\n            var selectedScripts=[],scriptNames=[];\n            var filter = _blanket.options(\"filter\");\n\n            function selectAllScripts() {\n              var browserScripts = toArray.call(document.scripts);\n              var blanketScripts = toArray.call(document.getElementsByTagName('blanket'));\n              return browserScripts.concat(blanketScripts);\n            }\n\n            if(filter != null){\n                //global filter in place, data-cover-only\n                var antimatch = _blanket.options(\"antifilter\");\n                selectedScripts = selectAllScripts()\n                                .filter(function(s){\n                                    return toArray.call(s.attributes).filter(function(sn){\n                                        return sn.nodeName === \"src\" && _blanket.utils.matchPatternAttribute(sn.nodeValue,filter) &&\n                                            (typeof antimatch === \"undefined\" || !_blanket.utils.matchPatternAttribute(sn.nodeValue,antimatch));\n                                    }).length === 1;\n                                });\n            }else{\n                selectedScripts = toArray.call(document.querySelectorAll(\"script[data-cover], blanket\"));\n            }\n            scriptNames = selectedScripts.map(function(s){\n                                    return _blanket.utils.qualifyURL(\n                                        toArray.call(s.attributes).filter(\n                                            function(sn){\n                                                return sn.nodeName === \"src\";\n                                            })[0].nodeValue);\n                                    });\n            if (!filter){\n                _blanket.options(\"filter\",\"['\"+scriptNames.join(\"','\")+\"']\");\n            }\n            return scriptNames;\n        },\n        loadAll: function(nextScript,cb,preprocessor){\n            /**\n             * load dependencies\n             * @param {nextScript} factory for priority level\n             * @param {cb} the done callback\n             */\n            var currScript=nextScript();\n            var isLoaded = _blanket.utils.scriptIsLoaded(\n                                currScript,\n                                _blanket.utils.ifOrdered,\n                                nextScript,\n                                cb\n                            );\n            \n            if (!(_blanket.utils.cache[currScript] && _blanket.utils.cache[currScript].loaded)){\n                var attach = function(){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Mark script:\"+currScript+\", as loaded and move to next script.\");}\n                    isLoaded();\n                };\n                var whenDone = function(result){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-File loading finished\");}\n                    if (typeof result !== 'undefined'){\n                        if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Add file to DOM.\");}\n                        _blanket._addScript(result);\n                    }\n                    attach();\n                };\n\n                _blanket.utils.attachScript(\n                    {\n                        url: currScript\n                    },\n                    function (content){\n                        _blanket.utils.processFile(\n                            content,\n                            currScript,\n                            whenDone,\n                            whenDone\n                        );\n                    }\n                );\n            }else{\n                isLoaded();\n            }\n        },\n        attachScript: function(options,cb){\n           var timeout = _blanket.options(\"timeout\") || 3000;\n           setTimeout(function(){\n                if (!_blanket.utils.cache[options.url].loaded){\n                    throw new Error(\"error (timeout=\" + timeout + \") loading source script: \" + options.url);\n                }\n           },timeout);\n           _blanket.utils.getFile(\n                options.url,\n                cb,\n                function(){ throw new Error(\"error loading source script: \" + options.url);}\n            );\n        },\n        ifOrdered: function(nextScript,cb){\n            /**\n             * ordered loading callback\n             * @param {nextScript} factory for priority level\n             * @param {cb} the done callback\n             */\n            var currScript = nextScript(true);\n            if (currScript){\n              _blanket.utils.loadAll(nextScript,cb);\n            }else{\n              cb(new Error(\"Error in loading chain.\"));\n            }\n        },\n        scriptIsLoaded: function(url,orderedCb,nextScript,cb){\n            /**\n           * returns a callback that checks a loading list to see if a script is loaded.\n           * @param {orderedCb} callback if ordered loading is being done\n           * @param {nextScript} factory for next priority level\n           * @param {cb} the done callback\n           */\n           if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Returning function\");}\n            return function(){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Marking file as loaded: \"+url);}\n           \n                _blanket.utils.cache[url].loaded=true;\n            \n                if (_blanket.utils.allLoaded()){\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-All files loaded\");}\n                    cb();\n                }else if (orderedCb){\n                    //if it's ordered we need to\n                    //traverse down to the next\n                    //priority level\n                    if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Load next file.\");}\n                    orderedCb(nextScript,cb);\n                }\n            };\n        },\n        cache: {},\n        allLoaded: function (){\n            /**\n             * check if depdencies are loaded in cache\n             */\n            var cached = Object.keys(_blanket.utils.cache);\n            for (var i=0;i<cached.length;i++){\n                if (!_blanket.utils.cache[cached[i]].loaded){\n                    return false;\n                }\n            }\n            return true;\n        },\n        processFile: function (content,url,cb,oldCb) {\n            var match = _blanket.options(\"filter\");\n            //we check the never matches first\n            var antimatch = _blanket.options(\"antifilter\");\n            if (typeof antimatch !== \"undefined\" &&\n                    _blanket.utils.matchPatternAttribute(url,antimatch)\n                ){\n                oldCb(content);\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-File will never be instrumented:\"+url);}\n                _blanket.requiringFile(url,true);\n            }else if (_blanket.utils.matchPatternAttribute(url,match)){\n                if (_blanket.options(\"debug\")) {console.log(\"BLANKET-Attempting instrument of:\"+url);}\n                _blanket.instrument({\n                    inputFile: content,\n                    inputFileName: url\n                },function(instrumented){\n                    try{\n                        if (_blanket.options(\"debug\")) {console.log(\"BLANKET-instrument of:\"+url+\" was successfull.\");}\n                        _blanket.utils.blanketEval(instrumented);\n                        cb();\n                        _blanket.requiringFile(url,true);\n                    }\n                    catch(err){\n                        if (_blanket.options(\"ignoreScriptError\")){\n                            //we can continue like normal if\n                            //we're ignoring script errors,\n                            //but otherwise we don't want\n                            //to completeLoad or the error might be\n                            //missed.\n                            if (_blanket.options(\"debug\")) { console.log(\"BLANKET-There was an error loading the file:\"+url); }\n                            cb(content);\n                            _blanket.requiringFile(url,true);\n                        }else{\n                            var e = new Error(\"Error parsing instrumented code: \"+err);\n                            e.error = err;\n                            throw e;\n                        }\n                    }\n                });\n            }else{\n                if (_blanket.options(\"debug\")) { console.log(\"BLANKET-Loading (without instrumenting) the file:\"+url);}\n                oldCb(content);\n                _blanket.requiringFile(url,true);\n            }\n\n        },\n        cacheXhrConstructor: function(){\n            var Constructor, createXhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                Constructor = XMLHttpRequest;\n                this.createXhr = function() { return new Constructor(); };\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                Constructor = ActiveXObject;\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        new ActiveXObject(progId);\n                        break;\n                    } catch (e) {}\n                }\n                this.createXhr = function() { return new Constructor(progId); };\n            }\n        },\n        craeteXhr: function () {\n            throw new Error(\"cacheXhrConstructor is supposed to overwrite this function.\");\n        },\n        getFile: function(url, callback, errback, onXhr){\n            var foundInSession = false;\n            if (_blanket.blanketSession){\n                var files = Object.keys(_blanket.blanketSession);\n                for (var i=0; i<files.length;i++ ){\n                    var key = files[i];\n                    if (url.indexOf(key) > -1){\n                        callback(_blanket.blanketSession[key]);\n                        foundInSession=true;\n                        return;\n                    }\n                }\n            }\n            if (!foundInSession){\n                var xhr = _blanket.utils.createXhr();\n                xhr.open('GET', url, true);\n\n                //Allow overrides specified in config\n                if (onXhr) {\n                    onXhr(xhr, url);\n                }\n\n                xhr.onreadystatechange = function (evt) {\n                    var status, err;\n                    \n                    //Do not explicitly handle errors, those should be\n                    //visible via console output in the browser.\n                    if (xhr.readyState === 4) {\n                        status = xhr.status;\n                        if ((status > 399 && status < 600) /*||\n                            (status === 0 &&\n                                navigator.userAgent.toLowerCase().indexOf('firefox') > -1)\n                           */ ) {\n                            //An http 4xx or 5xx error. Signal an error.\n                            err = new Error(url + ' HTTP status: ' + status);\n                            err.xhr = xhr;\n                            errback(err);\n                        } else {\n                            callback(xhr.responseText);\n                        }\n                    }\n                };\n                try{\n                    xhr.send(null);\n                }catch(e){\n                    if (e.code && (e.code === 101 || e.code === 1012) && _blanket.options(\"ignoreCors\") === false){\n                        //running locally and getting error from browser\n                        _blanket.showManualLoader();\n                    } else {\n                        throw e;\n                    }\n                }\n            }\n        }\n    }\n});\n\n(function(){\n    var require = blanket.options(\"commonJS\") ? blanket._commonjs.require : window.require;\n    var requirejs = blanket.options(\"commonJS\") ? blanket._commonjs.requirejs : window.requirejs;\n    if (!_blanket.options(\"engineOnly\") && _blanket.options(\"existingRequireJS\")){\n\n        _blanket.utils.oldloader = requirejs.load;\n\n        requirejs.load = function (context, moduleName, url) {\n            _blanket.requiringFile(url);\n            _blanket.utils.getFile(url,\n                function(content){\n                    _blanket.utils.processFile(\n                        content,\n                        url,\n                        function newLoader(){\n                            context.completeLoad(moduleName);\n                        },\n                        function oldLoader(){\n                            _blanket.utils.oldloader(context, moduleName, url);\n                        }\n                    );\n                }, function (err) {\n                _blanket.requiringFile();\n                throw err;\n            });\n        };\n    }\n    // Save the XHR constructor, just in case frameworks like Sinon would sandbox it.\n    _blanket.utils.cacheXhrConstructor();\n})();\n\n})(blanket);\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/config.js":"(function(){\n    var newOptions={};\n    //http://stackoverflow.com/a/2954896\n    var toArray =Array.prototype.slice;\n    var scripts = toArray.call(document.scripts);\n    toArray.call(scripts[scripts.length - 1].attributes)\n                    .forEach(function(es){\n                        if(es.nodeName === \"data-cover-only\"){\n                            newOptions.filter = es.nodeValue;\n                        }\n                        if(es.nodeName === \"data-cover-never\"){\n                            newOptions.antifilter = es.nodeValue;\n                        }\n                        if(es.nodeName === \"data-cover-reporter\"){\n                            newOptions.reporter = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-adapter\"){\n                            newOptions.adapter = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-loader\"){\n                            newOptions.loader = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-timeout\"){\n                            newOptions.timeout = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-modulepattern\") {\n                            newOptions.modulePattern = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-reporter-options\"){\n                            try{\n                                newOptions.reporter_options = JSON.parse(es.nodeValue);\n                            }catch(e){\n                                if (blanket.options(\"debug\")){\n                                    throw new Error(\"Invalid reporter options.  Must be a valid stringified JSON object.\");\n                                }\n                            }\n                        }\n                        if (es.nodeName.toLowerCase() === \"data-cover-testreadycallback\"){\n                            newOptions.testReadyCallback = es.nodeValue;\n                        }\n                        if (es.nodeName.toLowerCase() === \"data-cover-customvariable\"){\n                            newOptions.customVariable = es.nodeValue;\n                        }\n                        if (es.nodeName === \"data-cover-flags\"){\n                            var flags = \" \"+es.nodeValue+\" \";\n                            if (flags.indexOf(\" ignoreError \") > -1){\n                                newOptions.ignoreScriptError = true;\n                            }\n                            if (flags.indexOf(\" autoStart \") > -1){\n                                newOptions.autoStart = true;\n                            }\n                            if (flags.indexOf(\" ignoreCors \") > -1){\n                                newOptions.ignoreCors = true;\n                            }\n                            if (flags.indexOf(\" branchTracking \") > -1){\n                                newOptions.branchTracking = true;\n                            }\n                            if (flags.indexOf(\" sourceURL \") > -1){\n                                newOptions.sourceURL = true;\n                            }\n                            if (flags.indexOf(\" debug \") > -1){\n                                newOptions.debug = true;\n                            }\n                            if (flags.indexOf(\" engineOnly \") > -1){\n                                newOptions.engineOnly = true;\n                            }\n                            if (flags.indexOf(\" commonJS \") > -1){\n                                newOptions.commonJS = true;\n                            }\n                             if (flags.indexOf(\" instrumentCache \") > -1){\n                                newOptions.instrumentCache = true;\n                            }\n                        }\n                    });\n    blanket.options(newOptions);\n\n    if (typeof requirejs !== 'undefined'){\n        blanket.options(\"existingRequireJS\",true);\n    }\n    /* setup requirejs loader, if needed */\n    \n    if (blanket.options(\"commonJS\")){\n        blanket._commonjs = {};\n    }\n})();\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/adapters/jasmine-2.x-blanket.js":"(function() {\n\n    if (! jasmine) {\n        throw new Exception(\"jasmine library does not exist in global namespace!\");\n    }\n\n    function elapsed(startTime, endTime) {\n        return (endTime - startTime)/1000;\n    }\n\n    function ISODateString(d) {\n        function pad(n) { return n < 10 ? '0'+n : n; }\n\n        return d.getFullYear() + '-' +\n            pad(d.getMonth()+1) + '-' +\n            pad(d.getDate()) + 'T' +\n            pad(d.getHours()) + ':' +\n            pad(d.getMinutes()) + ':' +\n            pad(d.getSeconds());\n    }\n\n    function trim(str) {\n        return str.replace(/^\\s+/, \"\" ).replace(/\\s+$/, \"\" );\n    }\n\n    function escapeInvalidXmlChars(str) {\n        return str.replace(/\\&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/\\>/g, \"&gt;\")\n            .replace(/\\\"/g, \"&quot;\")\n            .replace(/\\'/g, \"&apos;\");\n    }\n\n    /**\n     * based on https://raw.github.com/larrymyers/jasmine-reporters/master/src/jasmine.junit_reporter.js\n     */\n    var BlanketReporter = function(savePath, consolidate, useDotNotation) {\n        \n        blanket.setupCoverage();\n    };\n    BlanketReporter.finished_at = null; // will be updated after all files have been written\n\n\tBlanketReporter.prototype = {\n\t\tspecStarted: function(spec) {\n\t\t\tblanket.onTestStart();\n\t\t},\n\n\t\tspecDone: function(result) {\n\t\t\tvar passed = result.status === \"passed\" ? 1 : 0;\n\t\t\tblanket.onTestDone(1,passed);\n\t\t},\n\n\t\tjasmineDone: function() {\n\t\t\tblanket.onTestsDone();\n\t\t},\n\n\t\tlog: function(str) {\n\t\t\tvar console = jasmine.getGlobal().console;\n\n\t\t\tif (console && console.log) {\n\t\t\t\tconsole.log(str);\n\t\t\t}\n\t\t}\n\t};\n\n\t// export public\n\tjasmine.BlanketReporter = BlanketReporter;\n\n\t//override existing jasmine execute\n\tvar originalJasmineExecute = jasmine.getEnv().execute;\n\tjasmine.getEnv().execute = function(){ console.log(\"waiting for blanket...\"); };\n\n\n\tblanket.beforeStartTestRunner({\n\t\tcheckRequirejs:true,\n\t\tcallback:function(){\n\t\t\tjasmine.getEnv().addReporter(new jasmine.BlanketReporter());\n\t\t\tjasmine.getEnv().execute = originalJasmineExecute;\n\t\t\tjasmine.getEnv().execute();\n\t\t}\n\t});\n})();","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/adapters/jasmine-blanket.js":"(function() {\n\n    if (typeof jasmine === \"undefined\") {\n        throw new Exception(\"jasmine library does not exist in global namespace!\");\n    }\n\n    function elapsed(startTime, endTime) {\n        return (endTime - startTime)/1000;\n    }\n\n    function ISODateString(d) {\n        function pad(n) { return n < 10 ? '0'+n : n; }\n\n        return d.getFullYear() + '-' +\n            pad(d.getMonth()+1) + '-' +\n            pad(d.getDate()) + 'T' +\n            pad(d.getHours()) + ':' +\n            pad(d.getMinutes()) + ':' +\n            pad(d.getSeconds());\n    }\n\n    function trim(str) {\n        return str.replace(/^\\s+/, \"\" ).replace(/\\s+$/, \"\" );\n    }\n\n    function escapeInvalidXmlChars(str) {\n        return str.replace(/\\&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/\\>/g, \"&gt;\")\n            .replace(/\\\"/g, \"&quot;\")\n            .replace(/\\'/g, \"&apos;\");\n    }\n\n    /**\n     * based on https://raw.github.com/larrymyers/jasmine-reporters/master/src/jasmine.junit_reporter.js\n     */\n    var BlanketReporter = function(savePath, consolidate, useDotNotation) {\n        \n        blanket.setupCoverage();\n    };\n    BlanketReporter.finished_at = null; // will be updated after all files have been written\n\n    BlanketReporter.prototype = {\n        reportSpecStarting: function(spec) {\n            blanket.onTestStart();\n        },\n\n        reportSpecResults: function(suite) {\n            var results = suite.results();\n\n            blanket.onTestDone(results.totalCount,results.passed());\n        },\n\n        reportRunnerResults: function(runner) {\n            blanket.onTestsDone();\n        },\n\n        log: function(str) {\n            var console = jasmine.getGlobal().console;\n\n            if (console && console.log) {\n                console.log(str);\n            }\n        }\n    };\n\n\n    // export public\n    jasmine.BlanketReporter = BlanketReporter;\n\n    //override existing jasmine execute\n    jasmine.getEnv().execute = function(){ console.log(\"waiting for blanket...\"); };\n    \n    //check to make sure requirejs is completed before we start the test runner\n    var allLoaded = function() {\n        return window.jasmine.getEnv().currentRunner().specs().length > 0 && blanket.requireFilesLoaded();\n    };\n\n    blanket.beforeStartTestRunner({\n        checkRequirejs:true,\n        condition: allLoaded,\n        callback:function(){\n            jasmine.getEnv().addReporter(new jasmine.BlanketReporter());\n            window.jasmine.getEnv().currentRunner().execute();\n            jasmine.getEnv().execute = function () {\n                jasmine.getEnv().currentRunner().execute();\n            };\n        }\n    });\n})();\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/adapters/mocha-blanket.js":"(function() {\r\n\r\n    if(!mocha) {\r\n        throw new Exception(\"mocha library does not exist in global namespace!\");\r\n    }\r\n\r\n\r\n    /*\r\n     * Mocha Events:\r\n     *\r\n     *   - `start`  execution started\r\n     *   - `end`  execution complete\r\n     *   - `suite`  (suite) test suite execution started\r\n     *   - `suite end`  (suite) all tests (and sub-suites) have finished\r\n     *   - `test`  (test) test execution started\r\n     *   - `test end`  (test) test completed\r\n     *   - `hook`  (hook) hook execution started\r\n     *   - `hook end`  (hook) hook complete\r\n     *   - `pass`  (test) test passed\r\n     *   - `fail`  (test, err) test failed\r\n     *\r\n     */\r\n\r\n    var OriginalReporter = mocha._reporter;\r\n\r\n    var BlanketReporter = function(runner) {\r\n            runner.on('start', function() {\r\n                blanket.setupCoverage();\r\n            });\r\n\r\n            runner.on('end', function() {\r\n                blanket.onTestsDone();\r\n            });\r\n\r\n            runner.on('suite', function() {\r\n                blanket.onModuleStart();\r\n            });\r\n\r\n            runner.on('test', function() {\r\n                blanket.onTestStart();\r\n            });\r\n\r\n            runner.on('test end', function(test) {\r\n                blanket.onTestDone(test.parent.tests.length, test.state === 'passed');\r\n            });\r\n\r\n            runner.on('hook', function(){\r\n                blanket.onTestStart();\r\n            });\r\n\r\n            runner.on('hook end', function(){\r\n                blanket.onTestsDone();\r\n            });\r\n\r\n            // NOTE: this is an instance of BlanketReporter\r\n            new OriginalReporter(runner);\r\n        };\r\n        \r\n    BlanketReporter.prototype = OriginalReporter.prototype;\r\n\r\n    mocha.reporter(BlanketReporter);\r\n\r\n    var oldRun = mocha.run,\r\n        oldCallback = null;\r\n\r\n    mocha.run = function (finishCallback) {\r\n      oldCallback = finishCallback;\r\n      console.log(\"waiting for blanket...\");\r\n    };\r\n    blanket.beforeStartTestRunner({\r\n        callback: function(){\r\n            if (!blanket.options(\"existingRequireJS\")){\r\n                oldRun(oldCallback);\r\n            }\r\n            mocha.run = oldRun;\r\n        }\r\n    });\r\n})();\r\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/adapters/usage-blanket.js":"(function() {\r\n\r\n    function usageCoverage(){\r\n        blanket.setupCoverage();\r\n        showReporter();\r\n        var currCov = window._$blanket ? copyObject(window._$blanket) : {};\r\n        setInterval(function(){\r\n            if (typeof window._$blanket !== \"undefined\" && hasChanged(currCov,window._$blanket)){\r\n                updateReporter(window._$blanket);\r\n                currCov = copyObject( window._$blanket);\r\n            }\r\n        },500);\r\n    }\r\n\r\n    \r\n\r\n    var showReporter = function(){\r\n        var coverageDiv = document.createElement(\"div\");\r\n        //styles\r\n        coverageDiv.style.position = \"fixed\";\r\n        coverageDiv.style.height = \"10px;\";\r\n        coverageDiv.style.padding = \"5px\";\r\n        coverageDiv.style.width = \"100%\";\r\n        coverageDiv.style.opacity = 0.6;\r\n        coverageDiv.style.backgroundColor = \"#cccccc\";\r\n        coverageDiv.style.bottom = 0;\r\n        coverageDiv.style.left = 0;\r\n\r\n        coverageDiv.id = \"blanket_reporter\";\r\n        coverageDiv.innerHTML = \"<p style='font-weight:bold;float:left;padding-right:10px;'>BlanketJS Results:</p>\";\r\n        var coverageInfo = document.createElement(\"p\");\r\n        coverageInfo.id = \"blanket_results\";\r\n        coverageInfo.style.float = \"left\";\r\n        coverageInfo.style.cssText = coverageInfo.style.cssText + \"padding-right:10px;\";\r\n        coverageDiv.appendChild(coverageInfo);\r\n\r\n        var link = document.createElement(\"p\");\r\n        link.id = \"resultsLink\";\r\n        link.style.fontStyle = \"normal\";\r\n        link.style.textDecoration = \"underline\";\r\n        link.style.cursor = \"pointer\";\r\n        link.innerText = \"See full results\";\r\n\r\n        coverageDiv.appendChild(link);\r\n        document.body.appendChild(coverageDiv);\r\n\r\n        document.getElementById(\"resultsLink\").addEventListener(\"click\",function(){\r\n            blanket.onTestsDone();\r\n            document.getElementById(\"blanket_reporter\").style.display = \"none\";\r\n        });\r\n\r\n        if (window._$blanket){ updateReporter(window._$blanket); }\r\n    };\r\n\r\n    var updateReporter = function(data){\r\n        var res = document.getElementById(\"blanket_results\");\r\n        var keys = Object.keys(data);\r\n\r\n        var total =0, totalCovered=0;\r\n\r\n        for(var i=0;i<keys.length;i++){\r\n            //loop through files\r\n            var file = data[keys[i]];\r\n            var lineKeys = Object.keys(file);\r\n            for(var j=0;j<lineKeys.length;j++){\r\n                //loop through lines\r\n                if (typeof file[lineKeys[j]] === \"number\"){\r\n                    if (file[lineKeys[j]] > 0){\r\n                        totalCovered++;\r\n                    }\r\n                    total++;\r\n                }\r\n            }\r\n        }\r\n        res.innerText = Math.round(totalCovered/total*100)+\"% Covered\";\r\n    };\r\n\r\n    var hasChanged = function(obj1,obj2){\r\n        var keys1 = Object.keys(obj1);\r\n        var keys2 = Object.keys(obj2);\r\n\r\n        if (keys1.length !== keys2.length){\r\n            return true;\r\n        }\r\n\r\n        var i=0,done=false;\r\n        while(i<keys1.length && !done){\r\n            if (obj1[keys1[i]].toString() !== obj2[keys1[i]].toString()){\r\n                done = true;\r\n            }\r\n            i++;\r\n        }\r\n        return done;\r\n    };\r\n\r\n    var copyObject = function(obj){\r\n        var newObj = {};\r\n\r\n        var keys = Object.keys(obj);\r\n        for (var i=0;i<keys.length;i++){\r\n            newObj[keys[i]]=obj[keys[i]].slice(0);\r\n        }\r\n        return newObj;\r\n    };\r\n    setTimeout(function(){\r\n        blanket.beforeStartTestRunner({\r\n            bindEvent:function(cb){\r\n                cb.call(blanket);\r\n            },\r\n            callback:function(){\r\n                usageCoverage();\r\n            }\r\n        });\r\n    },1000);\r\n})();","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/adapters/yui-blanket.js":"(function() {\r\n\r\n    if(!YUI) {\r\n        throw new Exception(\"YUI does not exist in global namespace!\");\r\n    }\r\n\r\n    YUI.add('blanket', function (Y) {\r\n        var TestRunner = Y.Test.Runner;\r\n\r\n        TestRunner.subscribe(TestRunner.COMPLETE_EVENT,function(data){\r\n            var res = data.results;\r\n            blanket.onTestDone(res.total, res.failed === 0 && (res.passed+res.ignored) === res.total);\r\n        });\r\n\r\n        TestRunner.subscribe(TestRunner.BEGIN_EVENT,function(){\r\n            blanket.setupCoverage();\r\n        });\r\n\r\n        TestRunner.subscribe(TestRunner.TEST_CASE_COMPLETE_EVENT,function(){\r\n            blanket.onTestsDone();\r\n        });\r\n\r\n        TestRunner.subscribe(TestRunner.TEST_SUITE_BEGIN_EVENT,function(){\r\n            blanket.onModuleStart();\r\n        });\r\n\r\n        TestRunner.subscribe(TestRunner.TEST_CASE_BEGIN_EVENT,function(){\r\n            blanket.onTestStart();\r\n        });\r\n    },'0.0.1',{\r\n        requires :['test']\r\n    });\r\n})();","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/loaders/blanket_cs.js":"(function(_blanket){\n    \n/**\n * @license cs 0.4.3 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/require-cs for details\n */\n\n/**\n*\n*  Base64 encode / decode\n*  http://www.webtoolkit.info/\n*\n**/\n \nvar Base64 = {\n \n    // private property\n    _keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n \n    // public method for encoding\n    encode : function (input) {\n        var output = \"\";\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n        var i = 0;\n \n        input = Base64._utf8_encode(input);\n \n        while (i < input.length) {\n \n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n \n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n \n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n \n            output = output +\n            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n \n        }\n \n        return output;\n    },\n \n    // public method for decoding\n    decode : function (input) {\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n \n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n \n        while (i < input.length) {\n \n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n \n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n \n            output = output + String.fromCharCode(chr1);\n \n            if (enc3 !== 64) {\n                output = output + String.fromCharCode(chr2);\n            }\n            if (enc4 !== 64) {\n                output = output + String.fromCharCode(chr3);\n            }\n \n        }\n \n        output = Base64._utf8_decode(output);\n \n        return output;\n \n    },\n \n    // private method for UTF-8 encoding\n    _utf8_encode : function (string) {\n        string = string.replace(/\\r\\n/g,\"\\n\");\n        var utftext = \"\";\n \n        for (var n = 0; n < string.length; n++) {\n \n            var c = string.charCodeAt(n);\n \n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            }\n            else if((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n            else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n \n        }\n \n        return utftext;\n    },\n \n    // private method for UTF-8 decoding\n    _utf8_decode : function (utftext) {\n        var string = \"\";\n        var i = 0;\n        var c = 0, c2 = 0;\n \n        while ( i < utftext.length ) {\n \n            c = utftext.charCodeAt(i);\n \n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            }\n            else if((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i+1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            }\n            else {\n                c2 = utftext.charCodeAt(i+1);\n                c3 = utftext.charCodeAt(i+2);\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                i += 3;\n            }\n \n        }\n \n        return string;\n    }\n \n};\n\ndefine(\"cs\", ['coffee-script'], function (CoffeeScript) {\n    'use strict';\n    var fs, getXhr,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        fetchText = function () {\n            throw new Error('Environment unsupported.');\n        },\n        buildMap = {};\n\n    if (typeof process !== \"undefined\" &&\n               process.versions &&\n               !!process.versions.node) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n        fetchText = function (path, callback) {\n            callback(fs.readFileSync(path, 'utf8'));\n        };\n    } else if ((typeof window !== \"undefined\" && window.navigator && window.document) || typeof importScripts !== \"undefined\") {\n        // Browser action\n        getXhr = function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            if (!xhr) {\n                throw new Error(\"getXhr(): XMLHttpRequest not available\");\n            }\n\n            return xhr;\n        };\n\n        fetchText = function (url, callback) {\n            var xhr = getXhr();\n            xhr.open('GET', url, true);\n            xhr.onreadystatechange = function (evt) {\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    callback(xhr.responseText);\n                }\n            };\n            xhr.send(null);\n        };\n        // end browser.js adapters\n    } else if (typeof Packages !== 'undefined') {\n        //Why Java, why is this so awkward?\n        fetchText = function (path, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(path),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                stringBuffer.append(line);\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    }\n\n    return {\n        fetchText: fetchText,\n\n        get: function () {\n            return CoffeeScript;\n        },\n\n        write: function (pluginName, name, write) {\n            if (buildMap.hasOwnProperty(name)) {\n                var text = buildMap[name];\n                write.asModule(pluginName + \"!\" + name, text);\n            }\n        },\n\n        version: '0.4.3',\n\n        load: function (name, parentRequire, load, config) {\n            // preserve existing logic with new literate coffeescript extensions (*.litcoffee or *.coffee.md).\n            // if name passes check, use it, as-is. otherwise, behave as before, appending .coffee to the\n            // requirejs binding.\n            var fullName = CoffeeScript.helpers.isCoffee(name) ? name : name + '.coffee';\n            var path = parentRequire.toUrl(fullName);\n            \n            _blanket.requiringFile(path);\n            var handleText = function(text) {\n              //Hold on to the transformed text if a build.\n              if (config.isBuild) {\n                  buildMap[name] = text;\n              }\n              //IE with conditional comments on cannot handle the\n              //sourceURL trick, so skip it if enabled.\n              /*@if (@_jscript) @else @*/\n              if (!config.isBuild) {\n                  text += \"\\r\\n//@ sourceURL=\" + path;\n              }\n              /*@end@*/\n\n              load.fromText(name, text);\n\n              //Give result to load. Need to wait until the module\n              //is fully parse, which will happen after this\n              //execution.\n              parentRequire([name], function (value) {\n                  load(value);\n              });\n            };\n\n            fetchText(path, function (text) {\n                // preserve existing logic. integrate new 'literate' compile flag with any requirejs configs.\n                var opts = config.CoffeeScript || {};\n                opts.literate = CoffeeScript.helpers.isLiterate(fullName);\n                opts.sourceMap = true;\n                opts.header = true;\n                opts.inline = true;\n                opts.sourceFiles = [name + opts.literate ? '' : '.coffee'];\n                opts.generatedFile = name + opts.literate ? '' : '.coffee';\n\n                var compiled;\n                //Do CoffeeScript transform.\n                try {\n                    compiled = CoffeeScript.compile(text, opts);\n                } catch (err) {\n                    err.message = \"In \" + path + \", \" + err.message;\n                    throw err;\n                }\n\t\t\t\ttext = compiled.js;\n\n                _blanket.requiringFile(path,true);\n                // If this file matches the blanket filter, instrument it.\n                var match = _blanket.options(\"filter\");\n                if (_blanket.utils.matchPatternAttribute(\n                        path.replace(\".coffee.md\",\"\")\n                            .replace(\".litcoffee\",\"\")\n                            .replace(\".coffee\",\"\"),match)){\n                    _blanket.instrument({\n                        inputFile: text,\n                        inputFileName: path+\" (compiled)\"\n                    },function(instrumented){\n                        handleText(instrumented);\n                    });\n                }\n                else {\n                  handleText(text);\n                }\n\n\n            });\n        }\n    };\n});\n})(blanket);\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/node-loaders/cjsx.js":"var simpleNodeLoader = require('./simple-node-loader');\n\nmodule.exports = function(blanket) {\n    var compiler = require(\"coffee-react\"),\n        oldLoaderCS = require.extensions['.cjsx'];\n\n    var compile = function(content) {\n        return compiler.compile(content);\n    };\n\n    require.extensions['.cjsx'] = simpleNodeLoader(blanket, oldLoaderCS, compile, /\\.cjsx/);\n};\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/node-loaders/simple-node-loader.js":"var fs = require(\"fs\"),\n    path = require(\"path\");\n\nmodule.exports = function(blanket, oldLoader, compile, filenamePattern) {\n    return function(localModule, filename) {\n\n        var antipattern = blanket.options(\"antifilter\"),\n            pattern = blanket.options(\"filter\"),\n            reporter_options = blanket.options(\"reporter_options\"),\n            originalFilename = filename;\n        filename = blanket.normalizeBackslashes(filename);\n\n        if (typeof antipattern !== \"undefined\" && blanket.matchPattern(filename.replace(filenamePattern, \"\"), antipattern)) {\n\n            oldLoader(localModule, filename);\n            if (blanket.options(\"debug\")) {\n                console.log(\"BLANKET-File will never be instrumented:\" + filename);\n            }\n        } else if (blanket.matchPattern(filename, pattern)) {\n            if (blanket.options(\"debug\")) {\n                console.log(\"BLANKET-Attempting instrument of:\" + filename);\n            }\n\n            var content = fs.readFileSync(filename, 'utf8');\n            content = compile(content);\n\n            var inputFilename = filename;\n            if (reporter_options && reporter_options.shortnames){\n                inputFilename = filename.replace(path.dirname(filename),\"\");\n            } else if (reporter_options && reporter_options.relativepath) {\n                inputFilename = filename.replace(process.cwd(),\"\");\n            }\n            if (reporter_options && reporter_options.basepath){\n                inputFilename = filename.replace(reporter_options.basepath + '/',\"\");\n            }\n\n            blanket.instrument({\n                inputFile: content,\n                inputFileName: inputFilename\n            }, function(instrumented) {\n                var baseDirPath = blanket.normalizeBackslashes(path.dirname(filename)) + '/.';\n                try {\n                    instrumented = instrumented.replace(/require\\s*\\(\\s*(\"|')\\./g, 'require($1' + baseDirPath);\n                    localModule._compile(instrumented, originalFilename);\n                } catch (err) {\n                    console.log(\"Error parsing instrumented code: \" + err);\n                }\n            });\n        } else {\n            oldLoader(localModule, filename);\n        }\n    };\n};\n\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/node-loaders/coffee-script.js":"var simpleNodeLoader = require('./simple-node-loader');\n\nmodule.exports = function(blanket) {\n    var coffeeScript = require(\"coffee-script\"),\n        oldLoaderCS = require.extensions['.coffee'];\n\n    var compile = function(content) {\n        return coffeeScript.compile(content);\n    };\n\n    require.extensions['.coffee'] = simpleNodeLoader(blanket, oldLoaderCS, compile, /\\.coffee$/);\n};\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/node-loaders/dynamic-loader.js":"var fs = require(\"fs\");\nvar path = require(\"path\");\n\n\nvar transpile = function(transpiler, filename) {\n    var transpiled = '';\n    m = {\n        _compile: function(c) {\n            transpiled = c;\n        }\n    };\n    transpiler(m, filename);\n    return transpiled;\n};\n\nvar wrapTranspiler = function(blanket, extension, oldLoader) {\n    return function(localModule, filename) {\n        var antipattern = blanket.options(\"antifilter\");\n        var pattern = blanket.options(\"filter\");\n        var reporter_options = blanket.options(\"reporter_options\");\n        var originalFilename = filename;\n        var filenamePattern = new RegExp(extension, \"i\");\n\n        filename = blanket.normalizeBackslashes(filename);\n\n        if (typeof antipattern !== \"undefined\" && blanket.matchPattern(filename.replace(filenamePattern, \"\"), antipattern)) {\n            if (blanket.options(\"debug\")) {\n                console.log(\"BLANKET-File will never be instrumented:\" + filename);\n            }\n            oldLoader(localModule, filename);\n        } else if (blanket.matchPattern(filename, pattern)) {\n            if (blanket.options(\"debug\")) {\n                console.log(\"BLANKET-Attempting instrument of:\" + filename);\n            }\n\n            var content = transpile(oldLoader, filename);\n            var inputFilename = filename;\n            if (reporter_options && reporter_options.shortnames) {\n                inputFilename = filename.replace(path.dirname(filename), \"\");\n            } else if (reporter_options && reporter_options.relativepath) {\n                inputFilename = filename.replace(process.cwd(), \"\");\n            }\n            if (reporter_options && reporter_options.basepath) {\n                inputFilename = filename.replace(reporter_options.basepath + '/', \"\");\n            }\n\n            blanket.instrument({\n                inputFile: content,\n                inputFileName: inputFilename\n            }, function (instrumented) {\n                var baseDirPath = blanket.normalizeBackslashes(path.dirname(filename)) + '/.';\n                try {\n                    instrumented = instrumented.replace(/require\\s*\\(\\s*(\"|')\\./g, 'require($1' + baseDirPath);\n                    localModule._compile(instrumented, originalFilename);\n                } catch (err) {\n                    console.log(\"Error parsing instrumented code: \" + err);\n                }\n            });\n        } else {\n            oldLoader(localModule, filename);\n        }\n    };\n};\n\nmodule.exports = function(blanket) {\n    var extensions = require.extensions;\n    for (var extension in extensions) {\n        if (extensions.hasOwnProperty(extension)) {\n            var transpiler = extensions[extension];\n            require.extensions[extension] = wrapTranspiler(blanket, extension, transpiler)\n        }\n    }\n\n};","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/node-loaders/iced-coffee-script.js":"var simpleNodeLoader = require('./simple-node-loader');\n\nmodule.exports = function(blanket) {\n    var coffeeScript = require(\"iced-coffee-script\"),\n        oldLoaderCS = require.extensions['.iced'];\n\n    var compile = function(content) {\n        return coffeeScript.compile(content);\n    };\n\n    require.extensions['.iced'] = simpleNodeLoader(blanket, oldLoaderCS, compile, /\\.iced$/);\n};\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/qunit/noautorun.js":"if (typeof QUnit !== 'undefined'){ QUnit.config.autostart = false; }","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/qunit/qunit.js":"(function(){\nif (typeof QUnit !== 'undefined'){\n    //check to make sure requirejs is completed before we start the test runner\n    var allLoaded = function() {\n        return window.QUnit.config.queue.length > 0 && blanket.noConflict().requireFilesLoaded();\n    };\n\n    if (!QUnit.config.urlConfig[0].tooltip){\n        //older versions we run coverage automatically\n        //and we change how events are binded\n        QUnit.begin=function(){\n            blanket.noConflict().setupCoverage();\n        };\n        \n        QUnit.done=function(failures, total) {\n            blanket.noConflict().onTestsDone();\n        };\n        QUnit.moduleStart=function( details ) {\n            blanket.noConflict().onModuleStart();\n        };\n        QUnit.testStart=function( details ) {\n            blanket.noConflict().onTestStart();\n        };\n        QUnit.testDone=function( details ) {\n            blanket.noConflict().onTestDone(details.total,details.passed);\n        };\n        blanket.beforeStartTestRunner({\n            condition: allLoaded,\n            callback: QUnit.start\n        });\n    }else{\n        QUnit.config.urlConfig.push({\n            id: \"coverage\",\n            label: \"Enable coverage\",\n            tooltip: \"Enable code coverage.\"\n        });\n    \n        if ( QUnit.urlParams.coverage || blanket.options(\"autoStart\") ) {\n            QUnit.begin(function(){\n                blanket.noConflict().setupCoverage();\n            });\n            \n            QUnit.done(function(failures, total) {\n                blanket.noConflict().onTestsDone();\n            });\n            QUnit.moduleStart(function( details ) {\n                blanket.noConflict().onModuleStart();\n            });\n            QUnit.testStart(function( details ) {\n                blanket.noConflict().onTestStart();\n            });\n            QUnit.testDone(function( details ) {\n                blanket.noConflict().onTestDone(details.total,details.passed);\n            });\n            blanket.noConflict().beforeStartTestRunner({\n                condition: allLoaded,\n                callback: function(){\n                    if (!(blanket.options(\"existingRequireJS\") && !blanket.options(\"autoStart\"))){\n                        QUnit.start();\n                    }\n                }\n            });\n        }else{\n            if (blanket.options(\"existingRequireJS\")){ requirejs.load = _blanket.utils.oldloader; }\n            blanket.noConflict().beforeStartTestRunner({\n                condition: allLoaded,\n                callback: function(){\n                    if (!(blanket.options(\"existingRequireJS\") && !blanket.options(\"autoStart\"))){\n                        QUnit.start();\n                    }\n                },\n                coverage:false\n            });\n        }\n    }\n}\n})();","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/qunit/reporter.js":"blanket.defaultReporter = function(coverage){\n    var cssSytle = \"#blanket-main {margin:2px;background:#EEE;color:#333;clear:both;font-family:'Helvetica Neue Light', 'HelveticaNeue-Light', 'Helvetica Neue', Calibri, Helvetica, Arial, sans-serif; font-size:17px;} #blanket-main a {color:#333;text-decoration:none;}  #blanket-main a:hover {text-decoration:underline;} .blanket {margin:0;padding:5px;clear:both;border-bottom: 1px solid #FFFFFF;} .bl-error {color:red;}.bl-success {color:#5E7D00;} .bl-file{width:auto;} .bl-cl{float:left;} .blanket div.rs {margin-left:50px; width:150px; float:right} .bl-nb {padding-right:10px;} #blanket-main a.bl-logo {color: #EB1764;cursor: pointer;font-weight: bold;text-decoration: none} .bl-source{ overflow-x:scroll; background-color: #FFFFFF; border: 1px solid #CBCBCB; color: #363636; margin: 25px 20px; width: 80%;} .bl-source div{white-space: pre;font-family: monospace;} .bl-source > div > span:first-child{background-color: #EAEAEA;color: #949494;display: inline-block;padding: 0 10px;text-align: center;width: 30px;} .bl-source .hit{background-color:#c3e6c7} .bl-source .miss{background-color:#e6c3c7} .bl-source span.branchWarning{color:#000;background-color:yellow;} .bl-source span.branchOkay{color:#000;background-color:transparent;}\",\n        successRate = 60,\n        head = document.head,\n        fileNumber = 0,\n        body = document.body,\n        headerContent,\n        hasBranchTracking = Object.keys(coverage.files).some(function(elem){\n          return typeof coverage.files[elem].branchData !== 'undefined';\n        }),\n        bodyContent = \"<table id='blanket-main'><tr><th class='blanket bl-title'><th class='bl-cl bl-file'><a href='http://alex-seville.github.com/blanket/' target='_blank' class='bl-logo'>Blanket.js</a> results</th><th class='bl-cl rs'>Coverage (%)</th><th class='bl-cl rs'>Covered/Total Smts.</th>\"+(hasBranchTracking ? \"<th class='bl-cl rs'>Covered/Total Branches</th>\":\"\")+\"<th style='clear:both;'></th></tr></table>\",\n        fileTemplate = \"<tr><td class='blanket {{statusclass}}'><td class='bl-cl bl-file'><span class='bl-nb'>{{fileNumber}}.</span><a href='javascript:blanket_toggleSource(\\\"file-{{fileNumber}}\\\")'>{{file}}</a></td><td class='bl-cl rs'>{{percentage}} %</td><td class='bl-cl rs'>{{numberCovered}}/{{totalSmts}}</td>\"+( hasBranchTracking ? \"<td class='bl-cl rs'>{{passedBranches}}/{{totalBranches}}</td>\" : \"\" )+\"<td id='file-{{fileNumber}}' class='bl-source' style='display:none;'>{{source}}</td><td style='clear:both;'></td></td></tr>\";\n        grandTotalTemplate = \"<tr><td class='blanket grand-total {{statusclass}}'><td class='bl-cl'>{{rowTitle}}</td><td class='bl-cl rs'>{{percentage}} %</td><td class='bl-cl rs'>{{numberCovered}}/{{totalSmts}}</td>\"+( hasBranchTracking ? \"<td class='bl-cl rs'>{{passedBranches}}/{{totalBranches}}</td>\" : \"\" ) + \"<td style='clear:both;'></td></td></tr>\";\n\n    function blanket_toggleSource(id) {\n        var element = document.getElementById(id);\n        if(element.style.display === 'block') {\n            element.style.display = 'none';\n        } else {\n            element.style.display = 'block';\n        }\n    }\n\n\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.text = blanket_toggleSource.toString().replace('function ' + blanket_toggleSource.name, 'function blanket_toggleSource');\n    body.appendChild(script);\n\n    var percentage = function(number, total) {\n        return (Math.round(((number/total) * 100)*100)/100);\n    };\n\n    var appendTag = function (type, el, str) {\n        var dom = document.createElement(type);\n        dom.innerHTML = str;\n        el.appendChild(dom);\n    };\n\n    function escapeInvalidXmlChars(str) {\n        return str.replace(/\\&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/\\>/g, \"&gt;\")\n            .replace(/\\\"/g, \"&quot;\")\n            .replace(/\\'/g, \"&apos;\")\n            .replace(/`/g, \"&grave;\")\n            .replace(/[$]/g, \"&dollar;\");\n    }\n\n    function isBranchFollowed(data,bool){\n        var mode = bool ? 0 : 1;\n        if (typeof data === 'undefined' ||\n            typeof data === null ||\n            typeof data[mode] === 'undefined'){\n            return false;\n        }\n        return data[mode].length > 0;\n    }\n\n    var branchStack = [];\n\n    function branchReport(colsIndex,src,cols,offset,lineNum){\n      var newsrc=\"\";\n       var postfix=\"\";\n      if (branchStack.length > 0){\n        newsrc += \"<span class='\" + (isBranchFollowed(branchStack[0][1],branchStack[0][1].consequent === branchStack[0][0]) ? 'branchOkay' : 'branchWarning') + \"'>\";\n        if (branchStack[0][0].end.line === lineNum){\n          newsrc += escapeInvalidXmlChars(src.slice(0,branchStack[0][0].end.column)) + \"</span>\";\n          src = src.slice(branchStack[0][0].end.column);\n          branchStack.shift();\n          if (branchStack.length > 0){\n            newsrc += \"<span class='\" + (isBranchFollowed(branchStack[0][1],false) ? 'branchOkay' : 'branchWarning') + \"'>\";\n            if (branchStack[0][0].end.line === lineNum){\n              newsrc += escapeInvalidXmlChars(src.slice(0,branchStack[0][0].end.column)) + \"</span>\";\n              src = src.slice(branchStack[0][0].end.column);\n              branchStack.shift();\n              if (!cols){\n                return {src: newsrc + escapeInvalidXmlChars(src) ,cols:cols};\n              }\n            }\n            else if (!cols){\n              return {src: newsrc + escapeInvalidXmlChars(src) + \"</span>\",cols:cols};\n            }\n            else{\n              postfix = \"</span>\";\n            }\n          }else if (!cols){\n            return {src: newsrc + escapeInvalidXmlChars(src) ,cols:cols};\n          }\n        }else if(!cols){\n          return {src: newsrc + escapeInvalidXmlChars(src) + \"</span>\",cols:cols};\n        }else{\n          postfix = \"</span>\";\n        }\n      }\n      var thisline = cols[colsIndex];\n      //consequent\n\n      var cons = thisline.consequent;\n      if (cons.start.line > lineNum){\n        branchStack.unshift([thisline.alternate,thisline]);\n        branchStack.unshift([cons,thisline]);\n        src = escapeInvalidXmlChars(src);\n      }else{\n        var style = \"<span class='\" + (isBranchFollowed(thisline,true) ? 'branchOkay' : 'branchWarning') + \"'>\";\n        newsrc += escapeInvalidXmlChars(src.slice(0,cons.start.column-offset)) + style;\n\n        if (cols.length > colsIndex+1 &&\n          cols[colsIndex+1].consequent.start.line === lineNum &&\n          cols[colsIndex+1].consequent.start.column-offset < cols[colsIndex].consequent.end.column-offset)\n        {\n          var res = branchReport(colsIndex+1,src.slice(cons.start.column-offset,cons.end.column-offset),cols,cons.start.column-offset,lineNum);\n          newsrc += res.src;\n          cols = res.cols;\n          cols[colsIndex+1] = cols[colsIndex+2];\n          cols.length--;\n        }else{\n          newsrc += escapeInvalidXmlChars(src.slice(cons.start.column-offset,cons.end.column-offset));\n        }\n        newsrc += \"</span>\";\n\n        var alt = thisline.alternate;\n        if (alt.start.line > lineNum){\n          newsrc += escapeInvalidXmlChars(src.slice(cons.end.column-offset));\n          branchStack.unshift([alt,thisline]);\n        }else{\n          newsrc += escapeInvalidXmlChars(src.slice(cons.end.column-offset,alt.start.column-offset));\n          style = \"<span class='\" + (isBranchFollowed(thisline,false) ? 'branchOkay' : 'branchWarning') + \"'>\";\n          newsrc +=  style;\n          if (cols.length > colsIndex+1 &&\n            cols[colsIndex+1].consequent.start.line === lineNum &&\n            cols[colsIndex+1].consequent.start.column-offset < cols[colsIndex].alternate.end.column-offset)\n          {\n            var res2 = branchReport(colsIndex+1,src.slice(alt.start.column-offset,alt.end.column-offset),cols,alt.start.column-offset,lineNum);\n            newsrc += res2.src;\n            cols = res2.cols;\n            cols[colsIndex+1] = cols[colsIndex+2];\n            cols.length--;\n          }else{\n            newsrc += escapeInvalidXmlChars(src.slice(alt.start.column-offset,alt.end.column-offset));\n          }\n          newsrc += \"</span>\";\n          newsrc += escapeInvalidXmlChars(src.slice(alt.end.column-offset));\n          src = newsrc;\n        }\n      }\n      return {src:src+postfix, cols:cols};\n    }\n\n    var isUndefined =  function(item){\n            return typeof item !== 'undefined';\n      };\n\n    var files = coverage.files;\n    var totals = {\n      totalSmts: 0,\n      numberOfFilesCovered: 0,\n      passedBranches: 0,\n      totalBranches: 0,\n      moduleTotalStatements : {},\n      moduleTotalCoveredStatements : {},\n      moduleTotalBranches : {},\n      moduleTotalCoveredBranches : {}\n    };\n\n    // check if a data-cover-modulepattern was provided for per-module coverage reporting\n    var modulePattern = _blanket.options(\"modulePattern\");\n    var modulePatternRegex = ( modulePattern ? new RegExp(modulePattern) : null );\n\n    for(var file in files)\n    {\n        if (!files.hasOwnProperty(file)) {\n            continue;\n        }\n\n        fileNumber++;\n\n        var statsForFile = files[file],\n            totalSmts = 0,\n            numberOfFilesCovered = 0,\n            code = [],\n            i;\n\n\n        var end = [];\n        for(i = 0; i < statsForFile.source.length; i +=1){\n            var src = statsForFile.source[i];\n\n            if (branchStack.length > 0 ||\n                typeof statsForFile.branchData !== 'undefined')\n            {\n                if (typeof statsForFile.branchData[i+1] !== 'undefined')\n                {\n                  var cols = statsForFile.branchData[i+1].filter(isUndefined);\n                  var colsIndex=0;\n\n\n                  src = branchReport(colsIndex,src,cols,0,i+1).src;\n\n                }else if (branchStack.length){\n                  src = branchReport(0,src,null,0,i+1).src;\n                }else{\n                  src = escapeInvalidXmlChars(src);\n                }\n              }else{\n                src = escapeInvalidXmlChars(src);\n              }\n              var lineClass=\"\";\n              if(statsForFile[i+1]) {\n                numberOfFilesCovered += 1;\n                totalSmts += 1;\n                lineClass = 'hit';\n              }else{\n                if(statsForFile[i+1] === 0){\n                    totalSmts++;\n                    lineClass = 'miss';\n                }\n              }\n              code[i + 1] = \"<div class='\"+lineClass+\"'><span class=''>\"+(i + 1)+\"</span>\"+src+\"</div>\";\n        }\n        totals.totalSmts += totalSmts;\n        totals.numberOfFilesCovered += numberOfFilesCovered;\n        var totalBranches=0;\n        var passedBranches=0;\n        if (typeof statsForFile.branchData !== 'undefined'){\n          for(var j=0;j<statsForFile.branchData.length;j++){\n            if (typeof statsForFile.branchData[j] !== 'undefined'){\n              for(var k=0;k<statsForFile.branchData[j].length;k++){\n                if (typeof statsForFile.branchData[j][k] !== 'undefined'){\n                  totalBranches++;\n                  if (typeof statsForFile.branchData[j][k][0] !== 'undefined' &&\n                    statsForFile.branchData[j][k][0].length > 0 &&\n                    typeof statsForFile.branchData[j][k][1] !== 'undefined' &&\n                    statsForFile.branchData[j][k][1].length > 0){\n                    passedBranches++;\n                  }\n                }\n              }\n            }\n          }\n        }\n        totals.passedBranches += passedBranches;\n        totals.totalBranches += totalBranches;\n\n        // if \"data-cover-modulepattern\" was provided,\n        // track totals per module name as well as globally\n        if (modulePatternRegex) {\n            var moduleName = file.match(modulePatternRegex)[1];\n\n            if(!totals.moduleTotalStatements.hasOwnProperty(moduleName)) {\n                totals.moduleTotalStatements[moduleName] = 0;\n                totals.moduleTotalCoveredStatements[moduleName] = 0;\n            }\n\n            totals.moduleTotalStatements[moduleName] += totalSmts;\n            totals.moduleTotalCoveredStatements[moduleName] += numberOfFilesCovered;\n\n            if(!totals.moduleTotalBranches.hasOwnProperty(moduleName)) {\n                totals.moduleTotalBranches[moduleName] = 0;\n                totals.moduleTotalCoveredBranches[moduleName] = 0;\n            }\n\n            totals.moduleTotalBranches[moduleName] += totalBranches;\n            totals.moduleTotalCoveredBranches[moduleName] += passedBranches;\n        }\n\n        var result = percentage(numberOfFilesCovered, totalSmts);\n\n        var output = fileTemplate.replace(\"{{file}}\", file)\n                                 .replace(\"{{percentage}}\",result)\n                                 .replace(\"{{numberCovered}}\", numberOfFilesCovered)\n                                 .replace(/\\{\\{fileNumber\\}\\}/g, fileNumber)\n                                 .replace(\"{{totalSmts}}\", totalSmts)\n                                 .replace(\"{{totalBranches}}\", totalBranches)\n                                 .replace(\"{{passedBranches}}\", passedBranches)\n                                 .replace(\"{{source}}\", code.join(\" \"));\n        if(result < successRate)\n        {\n            output = output.replace(\"{{statusclass}}\", \"bl-error\");\n        } else {\n            output = output.replace(\"{{statusclass}}\", \"bl-success\");\n        }\n        bodyContent += output;\n    }\n\n    // create temporary function for use by the global totals reporter,\n    // as well as the per-module totals reporter\n    var createAggregateTotal = function(numSt, numCov, numBranch, numCovBr, moduleName) {\n\n        var totalPercent = percentage(numCov, numSt);\n        var statusClass = totalPercent < successRate ? \"bl-error\" : \"bl-success\";\n        var rowTitle = ( moduleName ? \"Total for module: \" + moduleName : \"Global total\" );\n        var totalsOutput = grandTotalTemplate.replace(\"{{rowTitle}}\", rowTitle)\n            .replace(\"{{percentage}}\", totalPercent)\n            .replace(\"{{numberCovered}}\", numCov)\n            .replace(\"{{totalSmts}}\", numSt)\n            .replace(\"{{passedBranches}}\", numCovBr)\n            .replace(\"{{totalBranches}}\", numBranch)\n            .replace(\"{{statusclass}}\", statusClass);\n\n        bodyContent += totalsOutput;\n    };\n\n    // if \"data-cover-modulepattern\" was provided,\n    // output the per-module totals alongside the global totals\n    if (modulePatternRegex) {\n        for (var thisModuleName in totals.moduleTotalStatements) {\n            if (totals.moduleTotalStatements.hasOwnProperty(thisModuleName)) {\n\n                var moduleTotalSt = totals.moduleTotalStatements[thisModuleName];\n                var moduleTotalCovSt = totals.moduleTotalCoveredStatements[thisModuleName];\n\n                var moduleTotalBr = totals.moduleTotalBranches[thisModuleName];\n                var moduleTotalCovBr = totals.moduleTotalCoveredBranches[thisModuleName];\n\n                createAggregateTotal(moduleTotalSt, moduleTotalCovSt, moduleTotalBr, moduleTotalCovBr, thisModuleName);\n            }\n        }\n    }\n\n    createAggregateTotal(totals.totalSmts, totals.numberOfFilesCovered, totals.totalBranches, totals.passedBranches, null);\n    bodyContent += \"</div>\"; //closing main\n\n\n    appendTag('style', head, cssSytle);\n    //appendStyle(body, headerContent);\n    if (document.getElementById(\"blanket-main\")){\n        document.getElementById(\"blanket-main\").innerHTML=\n            bodyContent.slice(23,-6);\n    }else{\n        appendTag('div', body, bodyContent);\n    }\n    //appendHtml(body, '</div>');\n};\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/reporters/lcov_reporter.js":"//lcov_reporter\n(function (){\n    //takes the option: toHTML {boolean}\n\n    var body = document.body;\n\n    var appendHtml = function ( filename,data,toHTML) {\n\n        var str=\"\";\n        str += 'SF:' + filename + '\\n';\n\n        data.source.forEach(function(line, num) {\n          // increase the line number, as JS arrays are zero-based\n          num++;\n\n          if (data[num] !== undefined) {\n            str += 'DA:' + num + ',' + data[num] + '\\n';\n          }\n       });\n\n       str += 'end_of_record\\n';\n       if (toHTML){\n            var div = document.createElement('div');\n            div.className = \"blanket_lcov_reporter\";\n            div.innerText = str;\n            body.appendChild(div);\n        }else{\n            window._$blanket_LCOV = (window._$blanket_LCOV || '') + str;\n        }\n    };\n\n    blanket.customReporter=function(coverageData,options){\n        var toHTML=true;\n        if (typeof options !== 'undefined' && typeof options.toHTML !== 'undefined'){\n            toHTML = options.toHTML;\n        }\n        for (var filename in coverageData.files) {\n          var data = coverageData.files[filename];\n          appendHtml(filename,data,toHTML);\n        }\n    };\n})();\n","/home/travis/build/npmtest/node-npmtest-blanket/node_modules/blanket/src/reporters/simple_json_reporter.js":"//simple_json_reporter\n(function (){\n\n    var body = document.body;\n\n    var appendHtml = function (el, str) {\n        var div = document.createElement('div');\n        div.innerText = str;\n        el.appendChild(div);\n    };\n\n    blanket.customReporter= function(coverageData){\n        appendHtml(body, JSON.stringify(coverageData,null,\"\\t\"));\n    };\n})();"}